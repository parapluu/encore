module ParT(
    empty,
    liftv,
    liftf,
    join,
    extract,
    each,
    filter,
    bind,
    foreachp,
    aggregate,
    intersection,
    distinct,
    union,
    app,
    pairWith,
    groupJoin,
    groupByKey,
    zipWith,
    all,
    any,
    max,
    min,
  )

--
-- empty :: a -> Par[a]
--
-- create an empty ParT.
--
fun empty[a]() : Par[a]
  EMBED (Par[a])
    new_par_empty(_ctx, runtimeType[0]);
  END
end

--
-- filter :: (a -> bool) ->  Par[a] -> Par[a]
--
-- filter items out the items in the ParT that do not satisfy function `fn`.
--
fun filter[a](fn : a -> bool, ps : Par[a]) : Par[a]
  join(ps >> fun (item : a) => if fn(item) then
                                 liftv(item)
                               else
                                 empty[a]()
                               end)
end

--
-- bind :: (a -> bool) ->  Par[a] -> Par[a]
--
-- run function `fn` (possibly in parallel) over the items contained
-- in the ParT `p`, returning a new ParT collection.
fun bind[a, b](fn : a -> Par[b], p : Par[a]) : Par[b]
  join(p >> fn)
end

--
-- foreachp :: (a -> unit) ->  Par[a] -> Par[unit]
--
-- run function `fn` over the items in the ParT. Discard results.
--
fun foreachp[t](fn : t -> unit, p : Par[t]) : Par[unit]
  p >> fn
end

--
-- aggregate :: Par[t] -> a -> ((a, t) -> a) -> (a -> r) -> Par[r]
--
-- reduce the items in the ParT `p` and initial value `init` with function `fn1`.
-- finally, run `fn2` over the final result produced from `fn1` and lift it to
-- the ParT collection.
--
fun aggregate[t, a, r](p : Par[t], var init : a, fn1 : (a, t) -> a, fn2 : a -> r) : Par[r]
  liftf(reduce(fn1, init, p)) >> fn2
end

--
-- intersection :: Par[t] -> Par[t] -> ((t, t) -> int) -> Par[t]
--
-- return the items that are in both ParTs given a comparator function.
--
fun intersection[t](p1 : Par[t], p2 : Par[t], cmp : (t, t) -> int) : Par[t]
  EMBED (Par[t])
    party_intersection(_ctx, #{p1}, #{p2}, #{cmp}, _enc__type_t);
  END
end

--
-- distinct :: Par[t] -> ((t, t) -> int) -> Par[t]
--
-- return the distinct items contained in the ParT
fun distinct[t](p : Par[t], cmp : (t, t) -> int) : Par[t]
  EMBED (Par[t])
    party_distinct(_ctx, #{p}, #{cmp}, _enc__type_t);
  END
end

--
-- union :: Par[t] -> Par[t] -> ((t, t) -> int) -> Par[t]
--
-- union set: return items that exist in one ParT but not in the other one.
fun union[t](pl : Par[t], pr : Par[t], cmp : (t, t) -> int) : Par[t]
  distinct(pl ||| pr, cmp)
end

--
-- zipWith :: Par[a] -> Par[b] ->  ((a, b) -> t) -> Par[t]
--
-- zips two ParTs, running the function `fn` on the zipped elements.
--
fun zipWith[a, b, t](pa: Par[a], pb: Par[b], fn: (a, b) -> t): Par[t]
  EMBED (Par[t])
    party_zip_with(_ctx, #{pa}, #{pb}, #{fn}, _enc__type_t);
  END
end

--
-- app :: Par[a -> b] -> a -> Par[b]
--
-- apply ParT (as an arrow) to a given item.
-- return a new ParT.
--
fun app[a, b](p : Par[a -> b], item : a) : Par[b]
  p >> (fun (fn : a -> b) => fn(item))
end

--
-- pairWith :: Par[t] -> (t -> k) -> Par[(k, t)]
--
-- create ParT of tuples
--
fun pairWith[t, k](p : Par[t], fn : t -> k) : Par[(k, t)]
  p >> (fun (x : t) => (fn(x), x))
end

-- private function.
-- filter out items in the `p` ParT whose key is different from the given key `x`.
-- return a future with the elements that match the key
fun groupParTuples[k, i](x : k, p : Par[(k, i)], cmp : (k, k) -> int) : Fut[(k, Par[i])]
  val closure = fun (acc : (k, Par[i]), elem : (k, i))
                  val accKey = acc.0
                  val p = acc.1
                  val elemKey = elem.0
                  val elemValue = elem.1
                  val equals = cmp(accKey, elemKey)
                  if equals == 0 then
                    (accKey, p ||| liftv(elemValue))
                  else
                    acc
                  end
                end
  reduce(closure, (x, empty[i]()), p)
end

-- private function
-- finds if an element exists in a ParT of tuples
fun findElemInParTuple[k, t](key : k, p : Par[(k, t)], cmp : (k, k) -> int) : Fut[Maybe[t]]
  val closure = fun (acc : Maybe[t], elem : (k, t))
                  val keyElem = elem.0
                  val keyValue = elem.1
                  if cmp(key, keyElem) == 0 then
                     Just(keyValue)
                  else
                     acc
                  end
                end
  reduce(closure, Nothing, p)
end



{-
Group elements of two ParTs based on their keys and joins them according
to their join function. There are no guarantees regarding order of elements.
Elements that have no matching key are ignored.

E.g.

```
  val magnus = new Person("Magnus")
  val terry = new Person("Terry")
  val charlotte = new Person("Charlotte")
  val kiko = new Person("Kiko")

  val barley = new Pet("Barley", terry)
  val boots = new Pet("Boots", terry)
  val whiskers = new Pet("Whiskers", charlotte)
  val daisy = new Pet("Daisy", magnus)

  val people = liftv(magnus) ||| liftv(terry) ||| liftv(charlotte) ||| liftv(kiko)
  val pets = liftv(barley) ||| liftv(boots) ||| liftv(whiskers) ||| liftv(daisy)
  val query = groupJoin(people,
                        pets,
                        fun (p : Person) => p.name,
                        fun (p : Pet) => p.owner.name,
                        fun (per : Person, animals : Par[Pet])
                          liftv((per.name, animals >> (fun (p : Pet) => p.name)))
                        end,
                        fun (s1 : String, s2 : String) => s1.compare(s2))

  for elem <- extract(query) do
    match elem with
      case (name, pets) =>
        println("{}:", name)
        for pet <- extract(pets) do
          println("{}", pet)
        end
      end
    end
  end
```

In the example above, the expected output is:

```
  Terry:
  Barley
  Boots
  Charlotte:
  Whiskers
  Magnus:
  Daisy
```

where the person `Kiko` doesn't have any pet and is therefore ignored.

-}

fun groupJoin[t, i, k, r](pt : Par[t], pi : Par[i], tk : t -> k, ik : i -> k,
                          fn : (t, Par[i]) -> Par[r], cmp : (k, k) -> int) : Par[r]
  -- Pair function with their corresponding ParT
  val pkt = pairWith(pt, tk)
  val pki = pairWith(pi, ik)

  -- Get distinct elements
  val pkid = distinct(pki, fun (v : (k, i), u : (k, i))
                             cmp(v.0, u.0)
                           end)

  join(pkid >> (fun (tuple : (k, i))
                  val key = tuple.0
                  -- group values from the same key under the same ParT
                  val groupedPiKeyToPar = groupParTuples(key, pki, cmp)

                  -- fetch only the values from the tuple
                  val groupedPi = join(liftf(groupedPiKeyToPar ~~> (fun (keyParT: (k, Par[i]))
                                                                      keyParT.1
                                                                    end)))

                  -- find if the key from second ParT (from pkdi) exists
                  -- in the pkt ParT and execute function asynchronously
                  -- only if it does exist.
                  val futtkElem = findElemInParTuple(key, pkt, cmp)
                  val fp = futtkElem ~~> fun (tkElem : Maybe[t])
                                           match tkElem with
                                             case Nothing =>
                                               empty[r]()
                                             end
                                             case Just(tkResultVal) =>
                                               fn(tkResultVal, groupedPi)
                                             end
                                           end
                                         end

                  -- the result is an fp, Fut[Par[r]].
                  -- Lift the future to a ParT and flatten the Par[Par[t]] to Par[r]
                  join(liftf(fp))
                end))
end

--
-- Declaration of reduce function:
--
-- def reduce<acc, t>(redfn: (acc, t) -> acc, init: acc, p: Par t): Fut acc
--


--
--
-- Aggregation queries
--
--

--
-- all :: Par[t] -> (t -> bool) -> Fut[bool]
--
-- check that all items in the ParT satisfy a boolean condition.
-- returns a future bool.
--
fun all[t](p : Par[t], fn : t -> bool) : Fut[bool]
  val closure = fun (acc : Maybe[bool], elem : t)
                  match acc with
                    case Just(true) =>
                      Just(fn(elem))
                    end
                    case Just(false) =>
                      Just(false)
                    end
                    case Nothing =>
                      Just(fn(elem))
                    end
                  end
                end
  reduce(closure, Nothing, p) ~~> fun (m : Maybe[bool])
                                    match m with
                                      case Just(true) =>
                                        true
                                      end
                                      case Just(false) =>
                                        false
                                      end
                                      case Nothing =>
                                        false
                                      end
                                    end
                                  end
end

--
-- any :: Par[t] -> (t -> bool) -> Fut[bool]
--
-- check that at least one item satisfies a boolean condition.
-- returns a future bool.
--
fun any[t](p : Par[t], fn : t -> bool) : Fut[bool]
-- TODO: this current implementation needs to evaluate all items in the ParT.
--       a better solution should stop as soon as one solution is found
  val closure = fun (acc : Maybe[bool], elem : t)
                  match acc with
                    case Just(true) =>
                      Just(true)
                    end
                    case Just(false) =>
                      Just(fn(elem))
                    end
                    case Nothing =>
                      Just(fn(elem))
                    end
                  end
                end
  reduce(closure, Nothing, p) ~~> fun (m : Maybe[bool])
                                    match m with
                                      case Just(true) =>
                                        true
                                      end
                                      case Just(false) =>
                                        false
                                      end
                                      case Nothing =>
                                        false
                                      end
                                    end
                                  end
end

--
-- max :: Par[t] -> (t -> t -> int) -> Fut[Maybe[t]]
--
-- returns the maximum element contained in a ParT. Since ParT are monoids,
-- return a `future(maybe t)` where the future contains `nothing` if the ParT
-- is completely empty or `just value` where this value is the maximum value
-- contained in the ParT
--
fun max[t](p : Par[t], cmp : (t, t) -> int) : Fut[Maybe[t]]
  val closure = fun (acc : Maybe[t], elem : t)
                  match acc with
                    case Just(x) =>
                      Just(if cmp(x, elem) >= 0 then
                             x
                           else
                             elem
                           end)
                    end
                    case Nothing =>
                      Just(elem)
                    end
                  end
                end
  reduce(closure, Nothing, p)
end

--
-- min :: Par[t] -> (t -> t -> int) -> Fut[Maybe[t]]
--
-- returns the minimum element contained in a ParT. Since ParT are monoids,
-- return a `future(maybe t)` where the future contains `nothing` if the ParT
-- is completely empty or `just value` where this value is the minimum value
-- contained in the ParT
--
fun min[t](p : Par[t], cmp : (t, t) -> int) : Fut[Maybe[t]]
  val closure = fun (acc : Maybe[t], elem : t)
                  match acc with
                    case Just(x) =>
                      Just(if cmp(x, elem) >= 0 then
                             elem
                           else
                             x
                           end)
                    end
                    case Nothing =>
                      Just(elem)
                    end
                  end
                end
  reduce(closure, Nothing, p)
end

--
-- groupByKey :: Par[(k, v)] -> (k -> k -> int) -> Par[(k, Par[v])]
--
-- groups tuples with the same keys (first elements) under the same ParT
--
fun groupByKey[k,v](p: Par[(k, v)], cmp: (k, k) -> int): Par[(k, Par[v])]
  val closure = (fun (tuple: (k, v))
                   val key = tuple.0
                   -- group values from the same key under the same ParT
                   liftf(groupParTuples(key, p, cmp))
                 end)
  val removeDistinct = fun (x: (k, Par[v]), y: (k, Par[v])) => cmp(x.0, y.0)
  val p = bind(closure, p)
  distinct(p, removeDistinct)
end

--
-- extract :: Par[t] -> [t]
--
-- extract all elements from the ParT collection into an array.
-- this functions blocks the actor that executes it until
-- all items in the ParT are in the array
--
fun extract[t](p : Par[t]): [t]
  EMBED ([t])
    party_extract(_ctx, #{p}, _enc__type_t);
  END
end

--
-- join :: Par[Par[t]] ->  Par[t]
--
-- Flattens a Par[Par[t]] into a Par[t].
-- (note: does not flatten the transitive closure, i.e.
--        p = ... : Par[Par[Par[t]]]
--        join(p) : Par[Par[t]]
--
fun join[t](p : Par[Par[t]]): Par[t]
  EMBED (Par[t])
    party_join(_ctx, #{p});
  END
end

--
-- liftf :: Fut[t] -> Par[t]
--
-- lifts a future into a parallel collection.
--
fun liftf[t](fut: Fut[t]): Par[t]
  EMBED (Par[t])
    new_par_f(_ctx, #{fut}, _enc__type_t);
  END
end

--
-- liftv :: t -> Par[t]
--
-- lifts a value into a parallel collection.
--
fun liftv[t](item: t): Par[t]
  EMBED (Par[t])
    new_par_v(_ctx, #{item}, _enc__type_t);
  END
end

--
-- each ::  [t] -> Par[t]
--
-- lifts an array into a parallel collection.
-- the runtime assumes that the items in the array can be treated
-- independently and will try to maximise the parallelism in
-- the collection.
--
fun each[t](arr: [t]): Par[t]
  EMBED (Par[t])
    new_par_array(_ctx, #{arr}, _enc__type_t);
  END
end
