module Arrow(
    arr,
    first,
    second,
    compose,
    fanout,
    combine,
    liftA2,
    runArrow,
    runParArrow
  )

import ParT

--
-- This module provides functions for creating and operating on a parallel arrows,
-- a.k.a. PArrow. A PArrow can be seen as a function lifted to a ParT
-- (parallel computation). Multiple functions can be lifted to PArrow.
--
-- Use the `arr` combinator to lift a function into a PArrow. This does not
-- execute the function but allows you to declarative compose functions.
--
-- To run a parallel arrow over a single item, use the `runArrow` function.
--
-- To run a parallel arrow over a collection of parallel items, use `runParArrow`.
--
-- Complex combinations are created with the following combinators:
-- * first
-- * second
-- * compose
-- * fanout
-- * combine
-- * liftA2
--


typedef PArrow[a, b] = Par [a -> b]

--
-- arr :: (b -> c) -> PArrow[b, c]
--
-- `arr` lifts a function to the parallel arrow. The PArrow type represents
-- an abstraction with possibly many functions. By lifting multiple
-- functions these will potentially start performing work in parallel.
--
fun arr[a, b](fn : a -> b) : PArrow[a, b]
  liftv(fn)
end

--
-- first :: PArrow[a, b] -> PArrow [a, c] [b, c]
--
-- Given a PArrow that accepts one argument of type `a`
-- and returns an argument of type `b`, return a parallel arrow
-- that takes a tuple `(a, c)` and returns a tuple `(b, c)`.
-- (the second argument in the tuple is not changed).
--
fun first[a, b, c](p : PArrow[a, b]) : PArrow[(a, c), (b, c)]
  val closure = fun (fn : a -> b)
                  liftv(fun (t : (a, c)) => (fn(t.0), t.1))
                end
  bind(closure, p)
end

--
-- second :: PArrow[a, b] -> PArrow[(c, a), (c, b)]
--
-- Given a ParT function that accepts one argument of type `a`
-- and returns an argument of type `b`, return a lifted function
-- that takes a tuple `(c, a)` and returns a tuple `(b, c)`.
-- (the first argument in the tuple is not changed).
--
fun second[a, b, c](p : PArrow[a, b]) : PArrow[(c, a), (c, b)]
  val closure = fun (fn : a -> b)
                  liftv(fun (t : (c, a)) => (t.0, fn(t.1)))
                end
  bind(closure, p)
end

--
-- compose :: PArrow[a, d] -> PArrow[d, c]) -> PArrow[a, c]
--
-- Parallel arrow composition. The output of the first arrow is given as
-- input to the second arrow.
--
fun compose[a, d, c](p : PArrow[a, d], p2 : PArrow[d, c]) : PArrow[a, c]
  bind(fun (fn : a -> d)
         bind(fun (fn2 : d -> c) => arr(fun (x : a) => fn2(fn(x))), p2)
       end, p)
end

--
-- fanout :: PArrow[a, b] -> PArrow[a, c]) -> PArrow[a, (b, c)]
--
-- Given two parallel arrows that take the same first argument,
-- return a new parallel arrow that executes both functions,
-- yielding a tuple `(b, c)` as result.
--
fun fanout[a, b, c](p : PArrow[a, b], p2 : PArrow[a, c]) : PArrow[a, (b, c)]
  val clos = fun (fn1 : a -> b)
               val clos2 = fun (fn2 : a -> c)
                             liftv(fun (x : a) => (fn1(x), fn2(x)))
                           end
               bind(clos2, p2)
             end
  bind(clos, p)
end

--
-- combine :: PArrow[a, b] -> PArrow[c, d]) -> PArrow[(a, c), (b, d)]
--
-- Given two parallel arrows, return a new parallel arrow that takes tuples
-- `(a, c)` and return tuples `(b, d)`.
--
fun combine[a, b, c, d](p1 : PArrow[a, b], p2 : PArrow[c, d]) : PArrow[(a, c), (b, d)]
  val clos = fun (fn1 : a -> b)
               val clos2 = fun (fn2 : c -> d)
                             liftv(fun (t : (a, c)) => (fn1(t.0), fn2(t.1)))
                           end
               bind(clos2, p2)
             end
  bind(clos, p1)
end

--
-- liftA2 :: ((b, c) -> d) -> PArrow[a, b] -> PArrow[a, c] -> PArrow [a, d]
--
-- Given two parallel arrows that take the same argument, compose them and
-- aggregate their results with the function given as first argument.
-- (this resembles a ForkJoin in the sense that two functions may run possibly
--  in parallel and their end result will be aggregated using the function `fn`).
--
fun liftA2[a, b, c, d](fn: (b, c) -> d, p1: PArrow[a, b], p2: PArrow[a, c]): PArrow [a, d]
  val pb = fanout(p1, p2)
  val fnArr = arr(fun (t: (b, c)) => fn(t.0, t.1))
  compose(pb, fnArr)
end

--
-- runArrow :: a -> PArrow[a, b]) -> Par[b]
--
-- Lift the item to the parallel arrow. All functions in the PArrow are applied
-- to the item. return a ParT collection.
--
fun runArrow[a, b](item : a, p : PArrow[a, b]) : Par[b]
  p >> (fun (fn : a -> b) => fn(item))
end

--
-- runParrArrow :: Par[a] -> PArrow[a, b] -> Par[b]
--
-- Given a ParT collection and a parallel arrow, lift each item in the ParT
-- to the arrow function. return a ParT collection.
--
fun runParArrow[a, b](p: Par[a], arrow: PArrow[a, b]): Par[b]
  join(p >> fun (item: a) => runArrow(item, arrow))
end
