-- This file was automatically converted by encorec

module OrderedSet
local class OrderedSet[t]
  var root : Node[t]
  var size : int
  var cmp : (t, t) -> int
  def init(cmp : (t, t) -> int) : unit
    this.cmp = cmp
    this.size = 0
  end
  def add(e : t) : unit
    if this.root == null then
      this.root = new Node[t](e)
      this.size = 1
    else
      if this.root.add(e, this.cmp) then
        this.size = this.size + 1
      end
    end
  end
  def lookup(e : t) : Maybe[t]
    if this.root == null then
      Nothing : Maybe[t]
    else
      this.root.lookup(e, this.cmp)
    end
  end
  def remove(e : t) : unit
    assertTrue(false)
  end
  def forEach(f : t -> unit) : unit
    this.root.forEach(f)
  end
  def size() : int
    this.size
  end
  def iter() : OrderedSetIterator[t]
    new OrderedSetIterator[t](this.root)
  end
  def getMin() : Maybe[t]
    if this.root != null then
      Just(this.root.getMinNode().elem)
    else
      Nothing : Maybe[t]
    end
  end
end
local class Node[t] : Id
  var elem : t
  var left : Node[t]
  var right : Node[t]
  var parent : Node[t]
  def init(e : t) : unit
    this.elem = e
  end
  def addAsLeftChild(n : Node[t]) : unit
    this.left = n
    n.parent = this
  end
  def addAsRightChild(n : Node[t]) : unit
    this.right = n
    n.parent = this
  end
  def add(e : t, cmp : (t, t) -> int) : bool
    if cmp(e, this.elem) < 0 then
      if this.left == null then
        if cmp(this.elem, e) == 0 then
          false
        else
          this.addAsLeftChild(new Node[t](e))
          true
        end
      else
        this.left.add(e, cmp)
      end
    else
      if this.right == null then
        if cmp(this.elem, e) == 0 then
          false
        else
          this.addAsRightChild(new Node[t](e))
          true
        end
      else
        this.right.add(e, cmp)
      end
    end
  end
  def lookup(e : t, cmp : (t, t) -> int) : Maybe[t]
    if cmp(e, this.elem) == 0 then
      Just(this.elem)
    else
      if cmp(e, this.elem) < 0 then
        if this.left != null then
          this.left.lookup(e, cmp)
        else
          Nothing : Maybe[t]
        end
      else
        if this.right != null then
          this.right.lookup(e, cmp)
        else
          Nothing : Maybe[t]
        end
      end
    end
  end
  def forEach(f : t -> unit) : unit
    if this.left != null then
      this.left.forEach(f)
    end
    f(this.elem)
    if this.right != null then
      this.right.forEach(f)
    end
  end
  def getNextNode() : Node[t]
    if this.parent != null then
      if this == this.parent.left then
        this.parent
      else
        assertTrue(this == this.parent.right)
        if this.right != null then
          this.right.getMinNode()
        else
          null : Node[t]
        end
      end
    else
      if this.right == null then
        null : Node[t]
      else
        this.right.getMinNode()
      end
    end
  end
  def getMinNode() : Node[t]
    if this.left == null then
      this
    else
      this.left.getMinNode()
    end
  end
  def getMaxNode() : Node[t]
    if this.right == null then
      this
    else
      this.right.getMaxNode()
    end
  end
end
local class OrderedSetIterator[t]
  var cur : Node[t]
  def init(n : Node[t]) : unit
    if n == null then
      this.cur = null
    else
      this.cur = n.getMinNode()
    end
  end
  def step() : unit
    if this.cur != null then
      this.cur = this.cur.getNextNode()
    end
  end
  def hasNext() : bool
    if this.cur == null then
      false
    else
      true
    end
  end
  def next() : t
    let
      ret = this.cur.elem
    in
      this.step()
      ret
    end
  end
end
