-- This file was automatically converted by encorec

module Regex
EMBED

  // Do not forget to link against the C library
  // e.g. encorec RegexTest.enc -F "-I /usr/local/include -L /usr/local/lib/ -lpcre2-posix -lpcre2-8"
  #define PCRE2_CODE_UNIT_WIDTH 8
  #include <pcre2posix.h>
BODY

END

typedef PMatch = EMBED regmatch_t* END
typedef RegexT = EMBED regex_t END
local class Regex
  var pattern : String
  var maxSize : int
  var flagICase : bool
  var flagNewLine : bool
  var pMatch : PMatch
  var regex : RegexT
  var executed : EMBED char* END
  def Regex_trace() : unit
    EMBED (unit)
      _enc__read_String_t* _enc__field_pattern = _this->_enc__field_pattern;
      encore_trace_object((*_ctx), _enc__field_pattern, _enc__trace_String);

      regmatch_t* _enc__field_pMatch = _this->_enc__field_pMatch;
      pony_trace((*_ctx), _enc__field_pMatch);

    END
  end
  def init(pattern : String, maxSize : int) : unit
    this.pattern = pattern
    this.maxSize = maxSize
    this.pMatch = EMBED (PMatch)
                    regmatch_t *pMatch = encore_alloc(encore_ctx(), sizeof(regmatch_t) * #{maxSize});
                  pMatch;

                  END
  end
  def icase() : unit
    this.flagICase = true
  end
  def newLine() : unit
    this.flagNewLine = true
  end
  def compile() : bool
    let
      fIc = this.flagICase
      fNl = this.flagNewLine
      pattern = this.pattern.getData()
      regex = this.regex
    in
      EMBED (bool)
        bool result = 0;
        if (#{fIc}&& #{fNl}){
           result = regcomp(&((*_this)._enc__field_regex), #{pattern}, REG_EXTendED|REG_ICASE|REG_NEWLINE);
        } else if (#{fIc}) {
           result = regcomp(&((*_this)._enc__field_regex), #{pattern}, REG_EXTendED|REG_ICASE);
        } else {
           result = regcomp(&((*_this)._enc__field_regex), #{pattern}, REG_EXTendED);
        }

        !result;

      END
    end
  end
  def exec(str : String) : Maybe[bool]
    let
      s = str.getData()
      nmatch = this.maxSize
      pMatch = this.pMatch
    in
      this.executed = s
      var result = EMBED (int)
                     regexec(&((*_this)._enc__field_regex), #{s}, #{nmatch}, #{pMatch}, 0);

                   END
      if
       EMBED (bool)
         #{result}== REG_NOMATCH;
       END
      then
        Just(false)
      else
        if result == 0 then
          Just(true)
        else
          Nothing
        end
      end
    end
  end
  def matches() : int
    let
      regex = this.regex
    in
      EMBED (int)
        (int) #{regex}.re_nsub;

      END
    end
  end
  def getAt(i : int) : String
    let
      pmatch = this.pMatch
      executed = this.executed
    in
      new String(EMBED (EMBED char* END)
                   regoff_t match = #{pmatch}[#{i}].rm_eo - #{pmatch}[#{i}].rm_so;
        char *str = encore_alloc(*_ctx, ((size_t) match) + 1);
        strncpy(str, &#{executed}[#{pmatch}[#{i}].rm_so], (size_t) match);
        str;

                 END)
    end
  end
  def close() : unit
    let
      regex = this.regex
    in
      EMBED (unit)
        regfree(&#{regex});

      END
    end
  end
end
