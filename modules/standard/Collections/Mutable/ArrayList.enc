module ArrayList

import Data.Maybee(cat_maybes)
import Data.Either
import Collections.Mutable.Collection
import Collections.Mutable.Array

local class ArrayList[t] : Collection[t](next_empty, int_arr, foreach(), shift_right(), shift_left(), ensure_can_accomodate(), resize())
  var int_arr    : [Maybe[t]]
  var next_empty : uint

  def init() : unit
    -- Initial array can hold 16 elements, why?
    -- TODO: Determine best number of initial elements.
    this.int_arr = new [Maybe[t]](16)
    this.next_empty     = 0

    -- Initialize array.
    repeat i <- |this.int_arr| do
      this.int_arr(i) = Nothing
    end
  end

  def prepend(value: t) : unit
    -- Shift entire array over to make room.
    this.shift_right(0, 1)

    -- Store the value at the first index.
    this.int_arr(0) = Just(value)
  end

  def prepend_all(values: [t]) : unit
    -- Move entire array |values| number of steps to the right.
    this.shift_right(0, |values|)

    -- Copy over all values
    repeat i <- |values| do
      this.int_arr(|values| - i - 1) = Just(values(i))
    end
  end

  def append(value: t) : unit
    -- Make sure the internal array can fit an additional item.
    this.ensure_can_accomodate(1)

    -- Store new value.
    this.int_arr(this.next_empty) = Just(value)
    this.next_empty += 1
  end

  {-
    TODO: Optimize?
  -}
  def append_all(values: [t]) : unit
    -- this.append() is a cheap method (unless it has to resize the internal array),
    -- so we can afford to call it in a loop (hopefully).
    for v <- values do
      this.append(v)
    end
  end

  {-
    Inserts given value to given index.

    NOTE: This method can only insert new elements
    to pre-existing positions.

    Returns: Right(unit) on success
             Left(error_msg) on failure

    error_msg: "OutOfBounds" if attempting to
               insert to non-existing index.
  -}
  def insert(value: t, index: int) : Either[String,unit]
    -- Ensure index is reachable.
    if index > this.size() then
      return Left[String,unit]("OutOfBounds")
    end

    -- Shift array starting from index one step over.
    this.shift_right(index, 1)

    -- Store value.
    this.int_arr(index) = Just(value)

    -- Indicate success
    return Right[String,unit](())
  end

  {-
    True if given value is stored in ArrayList.
  -}
  def contains(value: t) : bool
    repeat i <- this.size() do
      match this.int_arr(i) with
        case Just(v) =>
          if v == value then
            return true
          end
        end
        case Nothing => ()
      end
    end

    return false
  end

  def element_at(index: int) : Maybe[t]
    -- Out of bounds
    if index >= this.size() then
      return Nothing : Maybe[t]
    end

    return this.int_arr(index)
  end

  def nth(index: int) : t
    match this.int_arr(index) with
      case Just(n) => n
    end
  end

  def remove(index: int) : Maybe[t]
    -- Out of bounds
    if index >= this.size() then
      return Nothing : Maybe[t]
    end

    val element = this.int_arr(index)

    -- Move all elements to the right of index one step to the left.
    -- This will overwrite given index.
    this.shift_left(index, 1)

    return element
  end

  def remove_front() : Maybe[t]
    this.remove(0)
  end

  def remove_back() : Maybe[t]
    this.remove(this.size() - 1)
  end

  def size() : int
    this.next_empty
  end

  def clone() : ArrayList[t]
    val clone = new ArrayList[t]()

    for x <- this.int_arr do
      match x with 
        case Just(ice) => clone.append(ice)
        case Nothing => { break; () }
      end
    end

    return clone
  end

  {-
    Checks to see if the internal array can fit amount number of elements.
    If not, resizes the internal array inorder to fit amount at a minimum.

    TODO: Optimize
  -}
  def ensure_can_accomodate(amount: uint) : unit
    -- This is the minimum amount of empty slots needed.
    val minimum_size = this.size() + amount

    if minimum_size >= |this.int_arr| then
      -- Set new size to be two times larger than minimum.
      -- Is this reasonable?
      val new_size = minimum_size * 2
      this.resize(new_size)
    end
  end

  {-
    Shifts all elements starting with index amount steps to the right.
    If necessary it also grows the int_arr to accomodate for the move.

    index: Leftmost element to right-shift.
    amount: Number of steps to move elements.

    TODO: Optimize
  -}
  def shift_right(index: uint, amount: uint) : unit
    -- Only right-shift if within bounds.
    if index <= this.next_empty then
      -- Ensure there is enough room in this.int_arr.
      this.ensure_can_accomodate(amount)

      -- Move the data
      repeat i <- (this.next_empty - index) do
        val new_pos = this.next_empty + amount - 1 - i
        val old_pos = this.next_empty - 1 - i
        this.int_arr(new_pos) = this.int_arr(old_pos)
        this.int_arr(old_pos) = Nothing
      end

      -- Move pointer to next_empty
      this.next_empty += amount
    end
  end

  {-
    Shifts all elements right of index amount steps to the left;
    overwriting amount number of elements left of and including index.
  -}
  def shift_left(index: uint, amount: uint) : unit
    -- Only left-shift if within bounds.
    if index <= this.next_empty && index + 1 >= amount then

      -- Move all data
      repeat i <- (this.next_empty - index) do
        val new_pos = index - amount + i + 1
        val old_pos = index + i + 1
        this.int_arr(new_pos) = this.int_arr(old_pos)
        this.int_arr(old_pos) = Nothing
      end

      -- Move pointer
      this.next_empty -= amount
    end
  end

  {-
    Resizes the internal array to the given size.
    Any elements that do not fit in the new size will be lost.
  -}
  def resize(new_size: uint) : unit
    val new_arr = new [Maybe[t]](new_size)

    -- Copy |new_size| elements from old array to new.
    -- Elements might be lost.
    repeat i <- new_size do
      if i < |this.int_arr| then
        new_arr(i) = this.int_arr(i)
      else
        -- If new size is larger than old, the remainder of elements have to be Nothing.
        new_arr(i) = Nothing
      end
    end

    -- Repoint reference to new_array.
    this.int_arr = new_arr
  end

  def foreach(f : t -> unit) : unit
    repeat i <- this.size() do
      match this.int_arr(i) with
        case Just(e) => f(e)
        case Nothing => ()
      end
    end
  end

  def map[u](f : t -> u) : ArrayList[u]
    val result = new ArrayList[u]()

    repeat i <- this.size() do
      match this.int_arr(i) with
        case Just(e) => result.append(f(e))
        case Nothing => ()
      end
    end

    return result
  end

  def filter(f : t -> bool) : ArrayList[t]
    val result = new ArrayList[t]()

    repeat i <- this.size() do
      match this.int_arr(i) with
        case Just(e) =>
          if f(e) then
            result.append(e)
          end
        end
        case Nothing => ()
      end
    end

    return result
  end

  def flatMap[u](f : t -> ArrayList[u]) : ArrayList[u]
    val result = new ArrayList[u]()

    repeat i <- this.size() do
      match this.int_arr(i) with
        case Just(e) =>
          for x <- f(e).underlying() do
            result.append(x)
          end
        end
        case Nothing => ()
      end
    end

    return result
  end
  
  def underlying() : [t]
    cat_maybes(this.int_arr)
  end
end
