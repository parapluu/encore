bundle Heuristics where

embed
#include <time.h>
#include <stdlib.h>
int64_t getRandomValue();

body

  int64_t getRandomValue() {
    srand(time(NULL)); //TODO seed only once
    int64_t r = rand();
    return r % 2;
  }


end

passive class Heuristics {

  valueSelection : int
  variableSelection : int
  branchOnVariable : bool

  vsidsCounters : [real]
  vsidsCounter : int
  vsidsMax : int -- How many new clauses before decaying variables

  def init(valueSelection : int, variableSelection : int, nVars : int, clauses : Vector<Clause>) : void {
    this.variableSelection = variableSelection;
    this.valueSelection = valueSelection;
    if(((this.variableSelection > 1) and (this.variableSelection < 4)) or (this.variableSelection == 6)) then {
      if(this.valueSelection <  2) then {
        print("Illegal combination of value {} and variable {} heuristics.\n", valueSelection, variableSelection);
        exit(-1);
      }
    };
    if (variableSelection == 6) then { -- VSIDS
      this.vsidsCounter = 0;
      this.vsidsMax = 50;
      this.vsidsCounters = new [real](nVars);
      repeat i <- clauses.size() {
        let
          clause = clauses.at(i)
          literals = clause.literals
        in {
          repeat j <- |literals| {
            this.vsidsCounters[literals[j] / 2] = this.vsidsCounters[literals[j] / 2] + 1.0
          }
        }
      }
    }
  }

  def getVariableSelection(variables : [Variable], clauses : Vector<Clause>) : [int] {
      match this.variableSelection with
      {- Literal Forward -}
      0 => this.forwardLiteralInOrder(variables, clauses)
      {- Literal Backwards -}
      1 => this.backwardsLiteralInOrder(variables, clauses)
      {- Variable Forward -}
      2 => this.forwardVariableInOrder(variables)
      {- Variable Backwards -}
      3 => this.backwardsVariableInOrder(variables)
      {- Largest unassigned clause -}
      4 => this.largestUnassignedClause(variables, clauses)
      {- Smallest unassigned clause -}
      5 => this.smallestUnassignedClause(variables, clauses)
      {- VSIDS -}
      6 => this.vsids(variables)
  }


    def valueSelectionToString() : void {
      match this.valueSelection with
      {- Value heuristic is always set literal false -}
      0 => print("Value heuristic: Always set literal false \n")
      {- Value heuristic is always set literal true -}
      1 => print("Value heuristic: Always set literal true \n")
      {- Random heuristic -}
      2 => print("Value heuristic: Random \n")
      {- Aways set variable to false -}
      3 =>  print("Value heuristic: Always set variable to false \n")
      {- Aways set variable to true -}
      4 =>  print("Value heuristic: Always set variable to true \n")

    }


    def variableSelectionToString() : void {
        match this.variableSelection with
        0 => print("Variable heuristic: Forward in order literal selection")
        1 =>  print("Variable heuristic: Backwards in order literal selection")
        2 =>  print("Variable heuristic: Forward in order variable selection")
        3 =>  print("Variable heuristic: Backwards in order variable selection")
        4 =>  print("Variable heuristic: Largest number of unassigned variables in clause")
        5 =>  print("Variable heuristic: Smallest number of unassigned variables in clause")
        6 =>  print("Variable heuristic: VSIDS")

    }
    def getValueSelection(literal : int) : int {

          match this.valueSelection with
          {- Value heuristic is always set literal false -}
          0 => literal % 2
          {- Value heuristic is always set literal true -}
          1 => (literal + 1) % 2
          {- Random heuristic -}
          2 => embed int getRandomValue(); end
          {- Value heuristic is always set variable false -}
          3 => 0
          {- Value heuristic is always set variable true -}
          4 => 1;
  }

  -- Only for VSIDS
  def addConflictClause (clause : Clause) : void {
    if (this.variableSelection == 6  ) then {
      let
        literals = clause.literals
      in {
        repeat j <- |literals| {
          this.vsidsCounters[literals[j] / 2] = this.vsidsCounters[literals[j] / 2] + 1.0
        }
      };
      this.vsidsCounter = this.vsidsCounter + 1;
      if (this.vsidsCounter == this.vsidsMax) then {
        this.vsidsCounter = 0;
        repeat i <- |this.vsidsCounters|{
          this.vsidsCounters[i] =  this.vsidsCounters[i] * 0.5
        }
      }
    }
  }

  def vsids(variables : [Variable]) : [int] {
    let
      cur = 0.0
      maxI = -1
      max = cur
    in {
      repeat i <- |this.vsidsCounters| {
        cur = this.vsidsCounters[i];
        if ((cur >= max) and ((variables[i]).value == -1)) then {
          max = cur;
          maxI = i;
        }
      };
      [maxI, -1]
    }
  }

  def forwardVariableInOrder(variables : [Variable]) : [int] {
    let
    index = -1
    loop = true
    i = 0
    iLimit = |variables|
    literal = -1
    in {
      while (loop and (i < iLimit)) {
        let
        current = variables[i]
        in {
            if(current.value == -1) then {
            loop  = false;
            index = i
          };
          i = i + 1;
        }
      };
    [index, literal]
    }
  }

  def backwardsVariableInOrder(variables : [Variable]) : [int] {
    let
    index = -1
    loop = true
    i = |variables| - 1
    iLimit = 0
    literal = -1
    in {
      while (loop and (i >= iLimit)) {
        let
        current = variables[i]
        in {
            if(current.value == -1) then {
            loop  = false;
            index = i
          };
          i = i - 1;
        }
      };
    [index, literal]
    }
  }

  def backwardsLiteralInOrder(variables : [Variable], clauses : Vector<Clause>) : [int] {
    let
    index = -1
    loop = true
    i = clauses.size() - 1
    iLimit = 0
    literal = -1
    in {
      while (loop and (i >= iLimit)) {
        let
        clause = clauses.at(i)
        literals = clause.literals
        j = |literals| - 1
        jLimit = 0
        in {
          while (loop and (j >= jLimit)) {
            literal = literals[j];
            index = literalToVarIndex(literal);
            let
            var = variables[index]
            in {
              if (var.value == -1) then {
                loop = false
              }
            };
            j = j - 1;
          }
        };
        i = i - 1;
      };
      [index, literal]
    }
  }


  def forwardLiteralInOrder(variables : [Variable], clauses : Vector<Clause>) : [int] {
    let
    index = -1
    loop = true
    i = 0
    iLimit = clauses.size()
    literal = -1
    in {
      while (loop and (i < iLimit)) {
        let
        clause = clauses.at(i)
        literals = clause.literals
        j = 0
        jLimit = |literals|
        in {
          while (loop and (j < jLimit)) {
            literal = literals[j];
            index = literalToVarIndex(literal);
            let
            var = variables[index]
            in {
              if (var.value == -1) then {
                loop = false;
              }
            };
            j = j + 1;
          }
        };
        i = i + 1;
      };
      [index, literal]
    }
  }

  def nUnassignedLiterals(clause : Clause, variables : [Variable]) : int {
    let
    nUnassigned = 0
    in {
      repeat i <- |clause.literals| {
        if((variables[literalToVarIndex(clause.literals[i])]).value == -1) then {
          nUnassigned = nUnassigned + 1
        }
      };
      nUnassigned
    }
  }

  def getUnassignedVariable(clause : Clause, variables : [Variable]) : [int] {
    let
    index = 0
    l = 0
    shouldBreak = false
    i = 0
    in {
        while((i < |clause.literals|) and (shouldBreak == false)) {
          index = literalToVarIndex(clause.literals[i]);
          if((variables[index]).value == -1) then {
            l = clause.literals[i];
            shouldBreak = true;
          };
          i = i + 1;
          if(i == |clause.literals|) then {
            shouldBreak = true;

          };
        };
        [index,l]
    }
  }

  def largestUnassignedClause(variables : [Variable], clauses : Vector<Clause>) : [int] {
    let
    i = 0
    iLimit = clauses.size()
    final_clause = null : Clause
    number_of_unassigned_literals = -1
    index = -1
    literal = -1
    in {
      while (i < iLimit) {
        let
        current_unassigned = this.nUnassignedLiterals(clauses.at(i),variables)
        in {
          if((number_of_unassigned_literals < current_unassigned) and (current_unassigned >= 1)) then {
            final_clause = clauses.at(i);
            number_of_unassigned_literals = current_unassigned;

          };
        };
        i = i + 1;
      };

      literal = this.getUnassignedVariable(final_clause,variables)[1];
      index = this.getUnassignedVariable(final_clause,variables)[0];
      [index, literal]
    }
  }
  def smallestUnassignedClause(variables : [Variable], clauses : Vector<Clause>) : [int] {
    let
    i = 0
    iLimit = clauses.size()
    final_clause = null : Clause
    number_of_unassigned_literals = 9223372036854775807
    index = -1
    literal = -1
    in {
      while (i < iLimit) {
        let
        current_unassigned = this.nUnassignedLiterals(clauses.at(i),variables)
        in {
          if((number_of_unassigned_literals > current_unassigned) and (current_unassigned >= 1)) then {
            final_clause = clauses.at(i);
            number_of_unassigned_literals = current_unassigned;

          };
        };
        i = i + 1;
      };

      literal = this.getUnassignedVariable(final_clause,variables)[1];
      index = this.getUnassignedVariable(final_clause,variables)[0];
      [index, literal]
    }
  }
}
