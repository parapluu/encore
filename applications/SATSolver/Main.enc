import Vector
import Clause
import Assignments
import ImplicationGraph
import Instance
import CDCL
import Parser
import Solver
import Heuristics


def literalToVarIndex(literal : int) : int {
  literal / 2
}

class Main {
  isSolved : bool
  solvers : [Solver]

  def addConflictClause(conflictClause : Clause, solverId : int) : void {
    repeat i <- |this.solvers| {
        if (i != solverId) then {
            (this.solvers[i])!addConflictClause(conflictClause);
        }
    }
  }

  def setSolved() : void {
      this.isSolved = true;
  }

  def getIsSolved() : bool {
      this.isSolved
  }

  def pause() : void {
    embed void fgetc(stdin); end
  }

  def printClauses(clauses : Vector<Clause>) : void {
    print("Clauses to solve");
    repeat n <- clauses.size() {
      clauses.at(n).toString();
    };
  }

  def charToInt(c : char) : int {
    if (c == '0') then 0
    else if (c == '1') then 1
    else if (c == '2') then 2
    else if (c == '3') then 3
    else if (c == '4') then 4
    else if (c == '5') then 5
    else if (c == '6') then 6
    else if (c == '7') then 7
    else if (c == '8') then 8
    else if (c == '9') then 9
    else {
      print("Cannot convert char {} to int, exiting. ", c);
      exit(1);
      0; -- to avoid compilation error with different types of if else
    }
  }

  def stringToInt(s : String) : int {
    let
      carr = s.to_array()
      sum = 0
      mul = 1
      sign = if (carr[0] == '-') then -1 else 1
      len = s.length()
    in {
      repeat i <- len {
        if ((sign == 1) or (i != len - 1)) then {
            sum = sum + mul * this.charToInt(carr[len - i - 1]);
            mul = mul * 10
        } else {
          sum = sum * sign
        }
      };
      sum
    }
  }

  def preProcess(clauses : Vector<Clause>, nVars : int) : [int] {
    let
    exists = new [bool](nVars)
    varsToAssign = new Vector<int>(10)
    j = 0
    in {
        while ( j < clauses.size()) {
          let
          clause = clauses.at(j)
          k = 0
          kLimit = |clause.literals|
          in {
            while ((k < kLimit)) {
              exists[clause.literals[k]/2] = true;
              k = k + 1;
            }
          };
          j = j + 1;
        };
        repeat i <- |exists| {
          if (not exists[i]) then {
            varsToAssign.push(i)
          }
        };
        varsToAssign.toArray();
    }
  }

  def main(args : [String]) : void {
    this.isSolved = false;
    if ((|args| == 1) or ((args[1]).equals("-h"))) then {
        print("{}", "Usage: ");
        print("{}", args[0]);
        print(" [-s nsolvers [-heu val1 var1 val2 var2 ...] | -i niter | -ccl len | -ccn num | -ccm num | -r restart ] filename");
        exit(-1);
    };
    let
    filename = null : String --args[1]
    numSolvers = 4
    iterations = 1 -- Number of times to spin before a solver checks for new clauses and invokes GC
    ccLength = 10 -- Maximum length of shared clauses
    ccNumber = -1 -- Maximum number of clauses to send per solver
    ccM = -1 -- Only send every ccM clause, -1 means sending all elegible clauses
    parser = null : Parser
    a = 1
    restarts = -1 -- Number of conflicts before restarting, < 0 means no restars
    heuristics = new Vector<Heuristics>(1)
    customVals = new Vector<int>(1)
    customVars = new Vector<int>(1)
    in {
      while (a < |args|) {
        if ((args[a]).equals("-s")) then {
          if (a + 1 < |args|) then {
            numSolvers = this.stringToInt(args[a + 1]);
            a = a + 1;
          } else {
            print("Missing argument for -s");
          };

          if ((args[a + 1]).equals("-heu")) then {
            a = a + 1;
            repeat i <- numSolvers {
              if (a + 2 >= |args|) then {
                print("Missing arguments for -heu, exiting.\n");
                exit(-1);
              };
              customVals.push(this.stringToInt(args[a + 1]));
              customVars.push(this.stringToInt(args[a + 2]));
              a = a + 2;
            }
          }
        } else if ((args[a]).equals("-i")) then {
          if (a + 1 < |args|) then {
            iterations = this.stringToInt(args[a + 1]);
            a = a + 1;
          } else {
            print("Missing argument for -i");
          }
        } else if ((args[a]).equals("-ccl")) then {
          if (a + 1 < |args|) then {
            ccLength = this.stringToInt(args[a + 1]);
            a = a + 1;
          } else {
            print("Missing argument for -ccl");
          }
        } else if ((args[a]).equals("-ccn")) then {
          if (a + 1 < |args|) then {
            ccNumber = this.stringToInt(args[a + 1]);
            a = a + 1;
          } else {
            print("Missing argument for -ccn");
          }
        } else if ((args[a]).equals("-ccm")) then {
          if (a + 1 < |args|) then {
            ccM = this.stringToInt(args[a + 1]);
            a = a + 1;
          } else {
            print("Missing argument for -ccm");
          }
        } else if ((args[a]).equals("-r")) then {
          if (a + 1 < |args|) then {
            restarts = this.stringToInt(args[a + 1]);
            a = a + 1;
          } else {
            print("Missing argument for -r");
          }
        }else {
          if (|args| - 1 == a) then {
            filename = args[a]
          } else {
            print("Wrong arguments, exiting.");
            print("{}", "Usage: ");
            print("{}", args[0]);
            print(" [-s nsolvers [-heu val1 var1 val2 var2 ...] | -i niter | -ccl len | -ccn num | -ccm num | -r restart ] filename");
            exit(-1);
          }

        };
        a = a + 1;
      };

      if (numSolvers <= 0) then {
        print("Illegal number of solver: {}, exiting.\n", numSolvers);
        exit(-1);
      };
      if (iterations <= 0) then {
        print("Illegal number of iterations: {}, exiting.\n", iterations);
        exit(-1);
      };
      if (ccLength < -1) then {
          print("Illegal conflict clause max length: {}, exiting.\n", ccLength);
          exit(-1);
      };
      if (ccNumber < -1) then {
        print("Illegal conflict clause maximum number: {}, exiting.\n", ccNumber);
        exit(-1);
      };
      if (ccM < -1) then {
        print("Illegal conflict clause quantity number: {}, exiting.\n", ccM);
        exit(-1);
      };
      if (filename == null) then {
        print("No input file specified, exiting.");
        exit(-1);
      };
      parser = new Parser(filename);
      parser.ParseFile();

      this.solvers = new [Solver](numSolvers);
      let
      clauses = parser.getClauses()
      nVars = parser.getnVariables()
      varsToAssign = this.preProcess(clauses, nVars)
      in {
        repeat i <- customVals.size() {
          heuristics.push(new Heuristics(customVals.at(i), customVars.at(i), nVars, clauses));
        };

        heuristics.push(new Heuristics(3,6, nVars, clauses)); --VSIDS
        heuristics.push(new Heuristics(0,0, nVars, clauses));--Literal false literal forward
        heuristics.push(new Heuristics(0,5, nVars, clauses));--Literal false smallest
        heuristics.push(new Heuristics(2,5, nVars, clauses));--Value random smallest
        heuristics.push(new Heuristics(3,0, nVars, clauses));--Variable false literal forward
        heuristics.push(new Heuristics(3,1, nVars, clauses));--Variable false literal back
        heuristics.push(new Heuristics(4,6, nVars, clauses)); --VSIDS
        heuristics.push(new Heuristics(4,0, nVars, clauses));--Variable true literal forward
        heuristics.push(new Heuristics(2,6, nVars, clauses)); --VSIDS random
        heuristics.push(new Heuristics(4,1, nVars, clauses));--Variable true literal back
        heuristics.push(new Heuristics(1,4, nVars, clauses));--Literal true largest
        heuristics.push(new Heuristics(0,1, nVars, clauses));--Literal false literal back
        heuristics.push(new Heuristics(2,0, nVars, clauses));--Value random literal forward
        heuristics.push(new Heuristics(2,1, nVars, clauses));--Value random literal back
        heuristics.push(new Heuristics(0,4, nVars, clauses));--Literal false largest
        heuristics.push(new Heuristics(1,0, nVars, clauses));--Literal true literal forward
        heuristics.push(new Heuristics(2,2, nVars, clauses));--Value random variable forward
        heuristics.push(new Heuristics(2,3, nVars, clauses));--Value random variable back
        heuristics.push(new Heuristics(2,4, nVars, clauses));--Value random largest
        heuristics.push(new Heuristics(3,2, nVars, clauses));--Variable false variable forward
        heuristics.push(new Heuristics(4,4, nVars, clauses));--Variable true largest
        heuristics.push(new Heuristics(3,3, nVars, clauses));--Variable false variable back
        heuristics.push(new Heuristics(4,2, nVars, clauses));--Variable true variable forward
        heuristics.push(new Heuristics(1,1, nVars, clauses));--Literal true literal back
        heuristics.push(new Heuristics(1,5, nVars, clauses));--Literal true smallest
        heuristics.push(new Heuristics(3,5, nVars, clauses));--Variable false smallest
        heuristics.push(new Heuristics(4,3, nVars, clauses));--Variable true variable back
        heuristics.push(new Heuristics(3,4, nVars, clauses));--Variable false largest
        heuristics.push(new Heuristics(4,5, nVars, clauses));--Variable true smallest


        repeat i <- numSolvers {
          this.solvers[i] = new Solver(parser.getClauses().clone(),
          parser.getnVariables(), varsToAssign, heuristics.at(i), this, i, ccLength,
          iterations, ccNumber, ccM, restarts);
        };
        repeat i <- numSolvers {
          let
          solver = this.solvers[i]
          in {
            solver.start()
          }
        };
      }
    }
  }
}
