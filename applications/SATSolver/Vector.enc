bundle Vector where

passive class Vector <t> {
-- private attributes
  arraySize : int
  nElements : int
  array : [t]

  def init(arraySize_ : int) : void {
      this.arraySize = arraySize_;
      this.array = new [t](this.arraySize);
      this.nElements = 0;
  }
  
-- public methods
  def clone() : Vector<t> {
    let
    newVector = new Vector<t>(this.nElements)
    in {
      repeat i <- this.nElements {
        newVector.push(this.array[i]);
      };
      newVector
    }
  }

  def set(index : int, value : t) : void {
    if (not this.inBounds(index)) then {
        print("Error: Vector set index out of bounds for index {}. Exiting.\n", index);
        exit(-1);
    };
    this.array[index] = value
  }

  def at(index : int) : t {
    if (not this.inBounds(index)) then {
        print("Error: Vector at index out of bounds for index {}. Exiting.\n", index);
        exit(-1);
    };
    this.array[index]
  }

  def remove(index : int) : void {
    if (not this.inBounds(index)) then {
        print("Error: Vector remove index out of bounds for index {}. Exiting.\n", index);
        exit(-1);
    };
    let
    i = index
    iLimit = this.nElements-1
    in {
      while (i < iLimit) {
        this.array[i] = this.array[i+1];
        i = i + 1;
      };
      this.nElements = this.nElements-1;
    }
  }

  def size() : int {
    this.nElements
  }

  def push(object : t) : void {
    if (this.nElements == this.arraySize) then {
      this.realloc(this.arraySize*2);
    };
    this.array[this.nElements] = object;
    this.nElements = this.nElements+1;
  }

  def pop() : t {
    if (this.nElements < 1) then {
      print("Error: Vector is empty, pop failed. Exiting.\n");
      exit(-1);
    };
    this.nElements = this.nElements-1;
    this.array[this.nElements];
  }

  def toArray() : [t] {
    let
    newArray = new [t](this.nElements)
    in {
      repeat i <- this.nElements {
        newArray[i] = this.array[i];
      };
      newArray
    }
  }

  def toString() : void {
    print("Vector: ");
    repeat i <- this.nElements {
      print("");
    };
    print("\n")
  }
-- private methods
  def inBounds(index : int) : bool {
    (index >= 0) and (index < this.nElements)
  }

  def realloc(newSize : int) : void {
    let
    newArray = new [t](newSize)
    in {
      repeat i <- this.arraySize {
        newArray[i] = this.array[i];
      };
      this.arraySize = newSize;
      this.array = newArray;
    }
  }
}
