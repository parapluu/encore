bundle Solver where

class Solver {
  clauses : Vector<Clause>
  n_vars : int
  cdcl : CDCL
  heuristics : Heuristics
  master : Main
  solverId : int
  iterations : int -- How long to spin before calling itself with a message
  ccLength : int
  ccSent : int
  ccNum : int -- How many conflict clauses to send
  ccM : int
  ccCounter : int
  restartCounter : int
  restartCounterMax : int


  def init(clauses : Vector<Clause>, n_vars : int, varsToAssign : [int], heuristics : Heuristics,
    master : Main, solverId : int, ccLength : int, iterations : int,
    ccNumber : int, ccM : int, restart : int) : void {
    this.clauses = clauses;
    this.n_vars = n_vars;
    this.heuristics = heuristics;
    this.master = master;
    this.cdcl = new CDCL(this.clauses, this.n_vars, varsToAssign, this.heuristics, solverId);
    this.solverId = solverId;
    this.ccLength = ccLength;
    this.iterations = iterations;
    this.ccNum = ccNumber;
    this.ccM = ccM;
    this.ccCounter = -1;
    this.ccSent = 0;
    this.restartCounter = 0;
    this.restartCounterMax = restart;
  }

  def start() : void {
    let
    solveable = true
    done = false
    res = null : [bool]
    loop = true
    in {
      this.loop(solveable, done);
    }
  }

  def finishLoop(solveable : bool) : void {
    if(get this.master.getIsSolved()) then {
      ()
    } else {
      if (solveable) then {
        this.master.setSolved();
        print("Satisfiable!");
        let
        correct = get this.cdcl.checkCorrectness()
        in {
          if (correct and solveable) then {
            print("Solution is correct, and was found by solver number {}:\n", this.solverId);
            this.heuristics.variableSelectionToString();
            this.heuristics.valueSelectionToString()
          } else {
            print("Solution is incorrect.\n");
          }
        };
        let
        conflicts = get this.cdcl.getAllConflicts()
        assignments = get this.cdcl.getAssignments()
        nSetVars = get this.cdcl.getSetVars()
        in {
          assignments.toString();
          print("Number of own conflicts: {}, number of received conflicts {}\n\n", conflicts[0], conflicts[1]);
        }
      } else {
        print("Problem found unsatisfiable by solver {} \n", this.solverId);
      }
    }
}

  def loop(solveable : bool, done : bool) : void {
    let
      i = 0
      solver = this
      shouldEnd = false
    in {
      while (i < this.iterations) {
        if (solveable and not done and not get this.master.getIsSolved()) then {
            let
            res = get this.cdcl.solve()
            in {
                solveable = res[0];
                done = res[1];
                if (res[2]) then {
                  if ((this.ccNum == -1) or (this.ccSent < this.ccNum)) then {
                    let
                      conflictClause = get this.cdcl.getLatestConflictClause()
                    in {
                      if ((this.ccLength == -1) or (conflictClause.size() <= this.ccLength)) then {
                        this.ccCounter = this.ccCounter + 1;
                        if (this.ccCounter%this.ccM == 0) then {
                          this.master ! addConflictClause(conflictClause, this.solverId);
                          this.ccSent = this.ccSent + 1;
                        }
                      }
                    }
                  };
                  this.restartCounter = this.restartCounter + 1;
                  if (this.restartCounter == this.restartCounterMax) then {
                    this.restartCounter = 0;
                    this.cdcl!restart()
                  }
                }
            }
        } else {
            i = this.iterations; -- break
            shouldEnd = true;
            this.finishLoop(solveable);
        };
        i = i + 1;
      };
      if (not shouldEnd) then {
        solver ! loop(solveable, done); -- send message to self to allow gc,
                                        -- and addConflictClause to run
      }
    }
  }

  def addConflictClause(conflictClause : Clause) : void {
    this.cdcl.addConflictClause(conflictClause);
  }
}
