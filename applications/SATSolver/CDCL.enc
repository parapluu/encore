bundle CDCL where

class CDCL {
-- private attributes
  heuristics : Heuristics
  assignments : Assignments
  instance : Instance
  dL : int
  nConflicts : int
  nRecievedConflicts : int
  originalNOfClauses : int
  latestConflictClause : Clause
  solverId : int

  nVars : int
  varsToAssign : [int]


  def addConflictClause(conflictClause : Clause) : void {
    this.instance.addClause(conflictClause);
    this.nRecievedConflicts = this.nRecievedConflicts + 1;
    this.heuristics.addConflictClause(conflictClause);
  }

  def getAllConflicts() : [int] {
    [this.nConflicts, this.nRecievedConflicts]
  }

  def init(clauses : Vector<Clause>, nVars : int, varsToAssign : [int], heuristics : Heuristics, solverId : int) : void {
    this.assignments = new Assignments(nVars*2, varsToAssign);
    this.originalNOfClauses = clauses.size();
    this.instance = new Instance(clauses, nVars*2);
    this.dL = 0;
    this.nConflicts = 0;
    this.nRecievedConflicts = 0;
    this.heuristics = heuristics;
    this.solverId = solverId;
    this.nVars = nVars;
    this.varsToAssign = varsToAssign;
  }

  def printClauses() : void {
    repeat n <- this.instance.clauses.size() {
      if (n == this.originalNOfClauses) then {
        print("Conflict clauses:")
      };
      this.instance.clauses.at(n).toString();
    };
  }

  def pause() : void {
    embed void fgetc(stdin); end
  }

  def getInstance() : Instance {
    this.instance
  }

  def getAssignments() : Assignments {
    this.assignments
  }

-- public methods
  def restart() : void {
    print("Solver {} restarted.\n", this.solverId);
    this.dL = 0;
    this.assignments = new Assignments(this.nVars*2, this.varsToAssign);
  }

  def getLatestConflictClause() : Clause {
      this.latestConflictClause
  }

  def getSetVars() : int {
    this.assignments.nSetVars;
  }

  def solve() : [bool] {
    let
    solveable = true
    done = false
    conflict = false
    in {
      if (this.unitPropagation(this.dL)) then { -- NO CONFLICT
        if (this.allVariablesAssigned()) then {
          done = true
        } else {
          let
          indexAndLiteral = this.heuristics.getVariableSelection(this.assignments.getVariables(), this.instance.clauses)
          varIndex = indexAndLiteral[0]
          value = this.heuristics.getValueSelection(indexAndLiteral[1])

          in {
            this.dL = this.dL + 1;
            this.assignments.guessVariable(varIndex, value, this.dL, false);
          }
        }
      } else { -- CONFLICT
        conflict = true;
        this.nConflicts = this.nConflicts + 1;
        if (this.nConflicts % 100 == 0) then {
          print("Number of conflicts: {} \n", this.nConflicts);
        };
        let
        backtrackDL = this.conflictAnalysis(this.dL)
        in {
          if (backtrackDL < 0) then {
            solveable = false;
          } else {
            this.backtrack(backtrackDL);
            this.dL = backtrackDL;
          }
        }
      };
      [solveable, done, conflict];
    }
  }

-- private methods
  def checkCorrectness() : bool {
    let
    variables = this.assignments.variables
    clauses = this.instance.clauses
    i = 0
    iLimit = |variables|
    error = false
    in {
      while (not error and (i < iLimit)) {
        let
        var1 = variables[i]
        var2 = variables[i+1]
        in {
          if ((var1.value == -1) or (var2.value == -1) or (var1.value != var2.value)) then {
            error = true;
          };
          i = i + 2;
        }
      };
      i = 0;
      iLimit = clauses.size();
      let
      variables = this.assignments.getVariables()
      in {
        while (not error and (i < iLimit)) {
          let
          clause = clauses.at(i)
          literals = clause.literals
          satisfied = false
          j = 0
          jLimit = |literals|
          in {
            while(not error and (j < jLimit)) {
              let
              literal = literals[j]
              index = literalToVarIndex(literal)
              var = variables[index]
              in {
                if ((literal%2+var.value == 1)) then {
                  satisfied = true;
                };
                j = j + 1;
              }
            };
            if (not satisfied) then {
              error = true;
            }
          };
          i = i + 1;
        }
      };
      not error
    }
  }

  def backtrack(dL : int) : void {
    let
    variables = this.assignments.getVariables()
    implicationGraph = this.instance.implicationGraph.implicationGraph
    in {
      repeat i <- |implicationGraph| {
        let
        implications = implicationGraph[i]
        j = implications.size()-1
        jLimit = 0
        in {
          while (j >= 0) {
            if (implications.at(j).dL > dL) then {
              implications.remove(j);
            };
            j = j - 1;
          }
        }
      };
      repeat i <- |variables| {
        let
        var = variables[i]
        in {
          if (var.dL > dL) then {
            this.assignments.resetVar(i);
          }
        }
      };
    };
  }

  def allVariablesAssigned() : bool {
    if (this.instance.nVars == this.assignments.nSetVars) then {
      true
    } else {
      false
    }
  }

  -- returns false if conflict is found, otherwise true
  def unitPropagation(dL : int) : bool {
    let
    literalsToAssign = new Vector<int>(10)
    popIndex = 0
    popCounter = 0
    firstLoop = true
    didPropagate = true -- set to true just to enter the loop at least once
    noConflict = true
    variables = this.assignments.variables
    in {
      while (((popCounter > 0) or firstLoop)) {
        if (not firstLoop) then {
          didPropagate = true;
          this.assignments.assignCounterpart(literalsToAssign.at(popIndex));
          popIndex = popIndex + 1;
          popCounter = popCounter - 1;
        };
        firstLoop = false;
        while (didPropagate and noConflict) {
          didPropagate = false;
          let
          i = 0
          iLimit = this.instance.clauses.size()
          in {
            while (noConflict and (i < iLimit) and (not didPropagate)) {
              let
              clause = this.instance.clauses.at(i)
              literalToProp = -1
              unitClauseV = new Vector<int>(|clause.literals|-1)
              j = 0
              jLimit = |clause.literals|
              loop = true
              in {
                while (loop and (j < jLimit)) {
                  let
                  literal = clause.literals[j]
                  var = variables[literal]
                  in {
                    if (var.value == -1) then {
                      if (literalToProp == -1) then {
                        literalToProp = literal;
                      } else {
                        loop = false;
                      }
                    } else {
                      if (literal%2+var.value == 1) then {
                        loop = false;
                      } else {
                        unitClauseV.push(literal);
                      }
                    };
                    j = j + 1;
                  }
                };
                if ((literalToProp != -1) and loop) then {
                  let
                  value = -1
                  unitClause = new Clause(unitClauseV.toArray())
                  index = literalToVarIndex(literalToProp)
                  in {
                    if (literalToProp%2 == 0) then {
                      value = 1;
                    } else {
                      value = 0;
                    };
                    noConflict = this.instance.implicationGraph.addImplication(unitClause, dL, value, index);
                    if (noConflict) then {
                      this.assignments.assignVariable(literalToProp, value, dL, true);
                      literalsToAssign.push(literalToProp);
                      popCounter = popCounter + 1;
                      didPropagate = true;
                    }
                  }
                }
              };
              i = i + 1;
            }
          }
        }
      };
      noConflict;
    }
  }

  def conflictAnalysis(dL : int) : int {
    let
    conflictNode = this.instance.implicationGraph.getLatestConflict()
    conflictLiterals = this.DFS(conflictNode)
    clauseToconvertToConflict = new Clause(conflictLiterals.toArray())
    conflictClause = this.assignments.convertClauseToConflictClause(clauseToconvertToConflict)
    backtrackDL = -1
    in {
      this.instance.addClause(conflictClause);
      this.heuristics.addConflictClause(conflictClause);
      this.latestConflictClause = conflictClause;
      let
        var = conflictClause.literals[0]
        in {
            if (var % 2 == 0) then {
              var = var + 1
            }else{
                var = var - 1
            };
            if ((|conflictClause.literals| == 1) and ((this.assignments.variables[var]).setByBranching)) then {
                  backtrackDL = (this.assignments.variables[var]).dL;

            } else {
                repeat i <- |conflictClause.literals| {
                  let
                  variables = this.assignments.getVariables()
                  literal = conflictClause.literals[i]
                  variable = variables[literalToVarIndex(literal)]
                  in {
                    if ((variable.dL > backtrackDL) and (variable.dL != dL)) then {
                      backtrackDL = variable.dL;
                    }
                  }
              }
            }
        };
        backtrackDL-1;
    }
  }

  def DFS(conflictNode : Vector<Implication>) : Vector<int>{
    let
    stack = new Vector<int>(10)
    toBeConflictClause = new Vector<int>(10)
    implicationGraph = this.instance.implicationGraph.implicationGraph
    variables = this.assignments.getVariables()
    in {
      stack.push(conflictNode.at(0).variableIndex);
      while (stack.size() > 0) {
        let
        varIndex = stack.pop()
        implications = implicationGraph[varIndex]
        var = variables[varIndex]
        in {
          if (not var.visited) then {
            var.visited = true;
            repeat i <- implications.size() {
              let
              implication = implications.at(i)
              unitClause = implication.unitClause
              in {
                repeat j <- |unitClause.literals| {
                  let
                  literal = unitClause.literals[j]
                  imp = implicationGraph[literalToVarIndex(literal)]
                  in {
                    if (imp.size() == 0) then {
                      let
                      unique = true
                      k = 0
                      kLimit = toBeConflictClause.size()
                      in {
                        while (unique and (k < kLimit)) {
                          if (toBeConflictClause.at(k) == literal) then {
                            unique = false;
                          };
                          k = k + 1;
                        };
                        if (unique) then {
                          toBeConflictClause.push(literal);
                        }
                      }
                    } else {
                      stack.push(literalToVarIndex(literal));
                    }
                  }
                }
              }
            }
          }
        }
      };
      repeat i <- |variables| {
        let
        var = variables[i]
        in {
          var.visited = false;
        }
      };
      toBeConflictClause;
    }
  }

  def literalToVarIndex(literal : int) : int {
    literal/2
  }
}
