-- Written by Evelina Andersson, 2015

import MapReduceFrameWork
import DocumentData

passive class Key
   value : String

   def init(value : String) : void
      this.value = value
  
   def getValue() : String
       this.value

   def equals(v : Key) : bool
       let
           myValue = this.getValue()
           valueValue = v.getValue()
       in myValue.equals(valueValue)

   def hashCode() : int
       this.value.to_int()

   def show () : void
       print("Key: {} ",this.value)


 passive class ExtendedEmitData
  def init (): void
  ()

  def show (): void
  ()

passive class EmitData
  id : String
  values : ArrayList

  def init(id : String, values : ArrayList) : void {
      this.id = id;
      this.values = values;
  }

  def setKey(key : Key) : void {
      this.id = key.getValue();
      ()
  }

  def getId() : String
      this.id

  def getKey() : Key
      new Key(this.id)

  def getValues() : ArrayList {
      this.values
   }

  def setValues(values : ArrayList) : void
      ()

  def getResult() : ArrayList {
      this.values
  }

  def getValue() : ArrayList {
      this.values
   }

  def addValues(values : ArrayList) : void 
      repeat i <- values.size()
         this.values.add(values.getCollector(i))

  def show() : void {
      print("EMIT DATA: {} ",this.id);
      this.values.show();
      print("\n")
   }

passive class MapFunction 
  collector : ArrayList
  def init() : void 
      this.collector = new ArrayList()
  
  def function(docid : String, tokens : ArrayList) : void  {         
      repeat i <- tokens.size() { 
        let
            valuesInEmit = new ArrayList() 
            valueCollector = new DataCollector()
            emitCollector = new DataCollector()
        in {
             valueCollector.setInt(1);
             valuesInEmit.add(valueCollector);
             emitCollector.setEmitData(new EmitData(tokens.getCollector(i).getString(),valuesInEmit));      
             this.collector.add(emitCollector);
         }     
       }
     }
     

  def getEmits() : ArrayList
      this.collector
  
passive class CombineFunction 
  sortedEmits : Hashtable
  collector   : ArrayList

  def init() : void {
    this.sortedEmits = new Hashtable(16,true,0.75);
    this.collector  = new ArrayList()
  }
  
  def function(key : Key, values : ArrayList) : void { 
      let 
           sum = 0
      in {
           repeat i <- values.size() { 
             sum = sum + values.getCollector(i).getInt()
      };
      let
           value = new ArrayList()
           data = new DataCollector()
           emitData = new DataCollector()
       in { 
           data.setInt(sum);
           value.add(data);
           emitData.setEmitData(new EmitData(key.getValue(), value));
           this.collector.add(emitData);
         }
     }
  } 

  def getSortedEmits() : Hashtable
      this.sortedEmits
  
  def getEmits() : ArrayList {
      this.collector
  }
  

passive class ReduceFunction
  def init() : void 
      ()
  
  def function(key : Key, values : ArrayList) : ArrayList { 
      let emits = new ArrayList()
          sum = 0
      in {
           repeat i <- values.size() {
                sum = sum + values.getCollector(i).getInt()
           };
           let
                value = new ArrayList()
                data = new DataCollector()
                emitData = new DataCollector()
            in {
                data.setInt(sum);
                value.add(data);
                emitData.setEmitData(new EmitData(key.getValue(), value));
                emits.add(emitData);
            };
            emits
      }
   }

   
class Main
  def main() : void{
    let 
        numberOfMappers = 5
        numberOfReducers = 5
        framework = new MapReduceFrameWork(numberOfMappers,numberOfReducers)
	documents = new ArrayList()
     in { 
         repeat i <- 50 {
           let
               document = new DataCollector()
	       documentContents = new DocumentData()
           in {
              document.setEmitData(new EmitData("file.txt", documentContents.getTokens()));
              documents.add(document);
           }
         };
          let result = framework.work(documents, false, 16, true, 0.75) in print("Result: {}", result.size());
          let result = framework.work(documents, true, 16, true, 0.75) in print("Result: {}", result.size());
     };
     print("DONE");
 }

