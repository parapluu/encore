def stringToInt(s : string) : int {
  embed int
    atoi(#{s});
  end;
}

class BigActor {
  id : int
  numMessages : int
  sinkActor : SinkActor
  
  numPings : int
  expPinger : int
  random : int 
  neighbors : [BigActor]
  
  def init(id : int, numMessages : int, sinkActor : SinkActor) : void {
    this.id = id;
    this.numMessages = numMessages;
    this.sinkActor = sinkActor;

    this.numPings = 0;
    this.expPinger = -1;
  }

  def random(a:int,b:int) : int -- At the moment, each active object does not generate random numbers independently on other objects
    embed int
      (random() % #{b}) + #{a};
    end

  def ping(id : int) : void {
    this.neighbors[id] ! pong(this.id);
  }

  def pong(id : int) : void {
    if(id != this.expPinger) then {
      print("ERROR: Expected: {} but received ping from {}\n", this.expPinger, id);
    };

    if(this.numPings == this.numMessages) then {
      this.sinkActor ! exit();
    } else {
      this.sendPing();
      this.numPings = this.numPings + 1;
    }
  }

  def setNeighbors(neighbors : [BigActor]) : void {
    this.neighbors = neighbors;
  }

  def sendPing() : void {
    let
      target = this.random(0, |this.neighbors|)
      targetActor = this.neighbors[target]
    in {
      this.expPinger = target;
      targetActor ! ping(this.id);
    }
  }
}

class SinkActor {
  numWorkers : int
  numMessages : int
  
  def init(numWorkers : int) : void {
    this.numWorkers = numWorkers;
    this.numMessages = 0;
  }

  def exit() : void {
    this.numMessages = this.numMessages + 1;
    if(this.numMessages == this.numWorkers) then {
      print("Everything should be done now!\n");
    }
  }
}

class Main { 
  def main(argv : [string]) : void {
    let
      numMessages = 16000
      numActors = if |argv| > 1 then stringToInt(argv[1]) else 1000
      sinkActor = new SinkActor(numActors)
      counter = 1
      chunkSize = 1000
      chunks = if(numActors >= chunkSize) then numActors / chunkSize else 1
    in {
      while(counter < chunks + 1) {
        let
          arraySize = if (chunkSize * (counter + 1) > numActors) then {
                        if (numActors > chunkSize) then chunkSize + numActors % chunkSize else numActors }
                      else chunkSize -- Checks if numActors can be seperated into more chunks or if we should create one that's a bit bigger (at most 1999)
          bigActors = new [BigActor](arraySize)
        in {
          repeat i <- |bigActors|
            bigActors[i] = new BigActor(i, numMessages, sinkActor);

          repeat i <- |bigActors|
            bigActors[i] ! setNeighbors(bigActors);

          repeat i <- |bigActors|
            bigActors[i] ! pong(-1);
        };
        counter = counter + 1;
      }
    }
  }
}
