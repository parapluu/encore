
class BigActor {
  id : int
  numMessages : int
  sinkActor : SinkActor
  
  numPings : int
  expPinger : int
  random : int 
  neighbors : [BigActor]

  seed : int  

  def genSeed(id:int) : int {
    embed int
      uint64_t s = time(NULL) + #{id} * 10;
      s;
    end
  }

  def init(id : int, numMessages : int, sinkActor : SinkActor) : void {
    this.id = id;
    this.numMessages = numMessages;
    this.sinkActor = sinkActor;

    this.numPings = 0;
    this.expPinger = -1;
    this.seed = this.genSeed(this.id);
  }

  def random(i:int) : int
    embed int
      (rand_r(&(_this->_enc__field_seed)) % #{i});
    end

  def ping(id : int) : void {
    this.neighbors[id] ! pong(this.id);   
  }

  def pong(id : int) : void {
    if(id != this.expPinger) then {
      print("ERROR: Expected: {} but received ping from {}\n", this.expPinger, id);
    };

    this.numPings = this.numPings + 1;

    if(this.numPings == this.numMessages) then {
      this.sinkActor ! exit();
    } else {
      this ! sendPing();  
    }
  }

  def setNeighbors(neighbors : [BigActor]) : void {
    this.neighbors = neighbors;
        
    -- let
    --   rnd = this.random(|this.neighbors|)
    -- in {	  
    --   this.neighbors[rnd] ! ping(this.id);
    -- }
  }

  def sendPing() : void {
    let
      target = this.random(|this.neighbors|)
      targetActor = this.neighbors[target]
    in {
      this.expPinger = target;
      targetActor ! ping(this.id);
    }
  }
}

class SinkActor {
  numWorkers : int
  numMessages : int
  
  def init(numWorkers : int) : void {
    this.numWorkers = numWorkers;
    this.numMessages = 0;
  }

  def exit() : void {
    this.numMessages = this.numMessages + 1;
    if(this.numMessages == this.numWorkers) then {
      print("Everything should be done now!\n");
    }
  }
}

class Main { 
  def extractor(maybe : Maybe int) : int {
    match maybe with
      Nothing => -1
      Just i => i
  }
  


  def main(argv : [String]) : void {
    let
      numMessages = 16 * 1024
      numActors = if |argv| > 1 then this.extractor((argv[1]).to_int()) else 8 * 1024
      sinkActor = new SinkActor(numActors)
      counter = 1
      chunkSize = 1 * 1024
      chunks = if(numActors >= chunkSize) then numActors / chunkSize else 1
    in {
      while(counter < chunks + 1) {
        let
          arraySize = if (chunkSize * (counter + 1) > numActors) then {
                        if (numActors > chunkSize) then chunkSize + numActors % chunkSize else numActors }
                      else chunkSize -- Checks if numActors can be seperated into more chunks or if we should create one that's a bit bigger (at most 1999)
          bigActors = new [BigActor](arraySize)
        in {
	  -- print arraySize;
          repeat i <- |bigActors|
            bigActors[i] = new BigActor(i, numMessages, sinkActor);

          repeat i <- |bigActors|
            bigActors[i] ! setNeighbors(bigActors);

          repeat i <- |bigActors|
            bigActors[i] ! pong(-1);
        };
        counter = counter + 1;
      }
    }
  }
}
