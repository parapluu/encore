-- Colour convention:
-- Blue   = 1
-- Red    = 2
-- Yellow = 3

import list

def stringToInt(s : string) : int {
  embed int
    atoi(#{s});
  end;
}

def listToString(list : List<string>) : string {
  let
    tempStr = ""
    cursor = list.first
  in {
    embed string
      #{tempStr} = pony_alloc(256 * sizeof(char));
    end;
    while(cursor != null) {
      let 
        value = cursor.getData().getValue()
      in {
        embed void
	  char *whitespace = " ";
          strcat(#{tempStr}, whitespace);
	  strcat(#{tempStr}, #{value});
        end;
	cursor = cursor.getNextLink();
      }
    };
    tempStr;
  };
}

def doCompliment(c1 : int, c2 : int) : int {
  if((c1 == 1) and (c2 == 1)) then 1
  else if((c1 == 1) and (c2 == 2)) then 3
  else if((c1 == 1) and (c2 == 3)) then 2
  else if((c1 == 2) and (c2 == 1)) then 3
  else if((c1 == 2) and (c2 == 2)) then 2
  else if((c1 == 2) and (c2 == 3)) then 1
  else if((c1 == 3) and (c2 == 1)) then 2
  else if((c1 == 3) and (c2 == 2)) then 1
  else if((c1 == 3) and (c2 == 3)) then 3
  else {print("This should never happen!\n"); 1}
}

def lookup(n : int) : string {
  if(n == 0) then "zero"
  else if(n == 1) then "one"
  else if(n == 2) then "two"
  else if(n == 3) then "three"
  else if(n == 4) then "four"
  else if(n == 5) then "five"
  else if(n == 6) then "six"
  else if(n == 7) then "seven"
  else if(n == 8) then "eight"
  else if(n == 9) then "nine"
  else "this should not happen!"
}

def spell(n : int) : List<string> {
  if(n == 0) then {
    let
      spelledList = new List<string>()
    in {
      spelledList.prepend(lookup(n));
      spelledList;
    }
  } else {
      let
        remaining = n
        spelledList = new List<string>()
      in {
        while(remaining > 0) {
	  spelledList.prepend(lookup(remaining % 10));
          remaining = remaining / 10;
	};
        spelledList;
      }
  };
}

def spellAndPrint(n : int) : void {
  let
    spelledList = spell(n)
    cursor = null : Link<string>
  in {
    cursor = spelledList.first;
    while(cursor != null) {
      print("{} ", cursor.getData().getValue());
      cursor = cursor.getNextLink();
    };
  }
}

class IDGenerator {
  nextID : int

  def init() : void {
    this.nextID = 0;
  }

  def genID() : int {
    this.nextID = this.nextID + 1;
    this.nextID;
  }
}

class Creature {
  place : MeetingPlace
  colour : int
  id : int
  sameCount : int
  count : int
  silent : bool -- Whether to print or not

  def init(place : MeetingPlace, colour : int, idGenerator : IDGenerator, silent : bool) : void {
    this.place = place;
    this.colour = colour;
    this.id = get idGenerator.genID();
    this.sameCount = 0;
    this.count = 0;
    this.silent = silent;
  }

  def meet(id : int, colour : int) : void {
    this.count = this.count + 1;
    this.colour = colour;
    if(this.id == id) then
      this.sameCount = this.sameCount + 1;
    this.place ! meet(this, this.id, this.colour);
  }

  def stop() : void {
    unless this.silent then
      print("{} {}\n", this.count, listToString(spell(this.sameCount)));
    this.place ! sumMeetings(this.count);
  }

  def run() : void {
    this.place ! meet(this, this.id, this.colour);
  }
}

class MeetingPlace {
  meetingsLeft : int
  firstColour : int
  firstID : int
  firstChameneos : Creature
  meetings : int
  amountOfCreaturesDone : int
  numberOfCreatures : int
  main : Main
  firstRun : bool

  def init(meetingsLeft : int, main : Main, numberOfCreatures : int, firstRun : bool) : void {
    this.meetingsLeft = meetingsLeft;
    this.firstColour = -1;
    this.firstID = 0;
    this.firstChameneos = null;
    this.amountOfCreaturesDone = 0;

    this.main = main;
    this.numberOfCreatures = numberOfCreatures;
    this.firstRun = firstRun;
  }

  def sumMeetings(meetings : int) : void {
    this.meetings = this.meetings + meetings;
    this.amountOfCreaturesDone = this.amountOfCreaturesDone + 1;
    
    if(this.amountOfCreaturesDone == this.numberOfCreatures) then {
      spellAndPrint(this.meetings);
      print("\n\n");
      if(this.firstRun) then this.main ! runSecondScenario();
    }
  }

  def meet(chameneos : Creature, id : int, c : int) : void {
    if(this.meetingsLeft == 0) then {
      chameneos ! stop();
    } else {
      if(this.firstColour == -1) then {
	this.firstChameneos = chameneos;
  	this.firstColour = c;
  	this.firstID = id;
      } else {
	let
          newColour = doCompliment(c, this.firstColour)
        in {
          this.firstColour = -1;
  	  this.meetingsLeft = this.meetingsLeft - 1;
          chameneos ! meet(this.firstID, newColour);
          this.firstChameneos ! meet(id, newColour);
        }
      };
    };
  }
}

class Main {
  meetings : int

  def runSecondScenario() : void {
    let
      colours = [1,2,3,2,3,1,2,3,2,1]
    in {
      this.runDefault(this.meetings, colours, false);
    }
  }

  -- firstRun flag to enable PL shootout behaviour
  def runDefault(n : int, colours : [int], firstRun : bool) : void {
    let
      place = new MeetingPlace(n, this, |colours|, firstRun)
    in {
      repeat i <- |colours|
	print("{} ", colours[i]);
      print("\n");
      let
	idGenerator = new IDGenerator()
      in {
	repeat i <- |colours| {
          let
	    colour = colours[i]
            creature = new Creature(place, colour, idGenerator, false)
	  in {
	    creature.run();
	  }
        };
      };
    };
  }

  -- run method which enables specifying amount of creatures, some prints disabled
  def run(meetings : int, creatureAmount : int) : void {
    let
      place = new MeetingPlace(meetings, this, creatureAmount, false)
      i = 0
    in {
      let
	idGenerator = new IDGenerator()
      in {
	repeat i <- creatureAmount {
          let
            colour = (i % 3) + 1
            creature = new Creature(place, colour, idGenerator, true)
	  in {
	    creature.run();
	  }
        };
      };
    };
  }

  def printColoursAux(c1: int, c2: int) : void {
    print("{} + {} -> {}\n", c1, c2, doCompliment(c1, c2));
  }

  def printColours() : void {
    this.printColoursAux(1, 1);
    this.printColoursAux(1, 2);
    this.printColoursAux(1, 3);
    this.printColoursAux(2, 1);  
    this.printColoursAux(2, 2);
    this.printColoursAux(2, 3);
    this.printColoursAux(3, 1);
    this.printColoursAux(3, 2);
    this.printColoursAux(3, 3);
    print("\n");
  }

  def main(argv : [string]) : void {
    let
      colours = [1,2,3] 
      numberOfMeetings = if |argv| > 1 then stringToInt(argv[1]) else 800000
      numberOfCreatures = if |argv| > 2 then stringToInt(argv[2]) else -1
    in {
      this.printColours();
      this.meetings = numberOfMeetings;

      if(numberOfCreatures != -1) then {
        this.run(numberOfMeetings, numberOfCreatures);
      } else {
        this.runDefault(numberOfMeetings, colours, true);
      };
    }
  }
}

