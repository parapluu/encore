#Number of messages sent --Done
#Creation of futures ---Done
#Uses of the forward construct...? --Todo
#Future fulfillment -- Working on it
#Getting the results of a future
#Chaining on a future --done
#Lifetime of a future -- done
#When a chaining funciton is run
#who runs the chaining?

#Ration of messages vs futures
#How much time ipent blocking a future
#Which classes blocks futures

#-------------------------------------------Begin

# counters
global actor_msg_send
global future_created
global blocks

#list of ID:s
global list_of_futures
global actor_ctx_id_blocked
global actor_being_blocked
global future_fulfil_list

#messages
probe process.mark("actor-msg-send")
{
      actor_msg_send <<< 1;
}

#futures
probe process.mark("future-create") {
      future_created <<< 1;
      created_future = sprint($arg2)
      list_of_futures[created_future] = $arg2
      start_stopwatch(created_future)
}

probe process.mark("future-block") {
      blocks <<< 1;
      blocked_future = sprint($arg2)
      start_stopwatch(sprint("block", $arg2))
      actor_being_blocked[blocked_future] = $arg1 
      actor_ctx_id_blocked[sprint($arg1)]++
}

probe process.mark("future-unblock") {
      fulfilled_fut = sprint("block", $arg2)
      stop_stopwatch(fulfilled_fut)
}

probe process.mark("future-destroy") {
      destroyed_future = sprint($arg2)
      if([destroyed_future] in list_of_futures) {
      	 stop_stopwatch(destroyed_future)
      }
}

probe process.mark("method-entry") {
      name = user_string($arg3)
      if(name == "init") {
         actor_ctx_id_blocked[sprint($arg1)] = 0
      }
}

probe process.mark("future-fulfil-end"){
      future_id = sprint($arg2)
      future_fulfil_list[sprint(future_id)] = future_id
}

#chaining
global chained_actor_list
probe process.mark("future-chaining") {
      future_chained = $arg2
      chained_actor_list[sprint(future_chained)] = future_chained
}

probe end {
      printf("\n")
      message_num = @count(actor_msg_send)
      future_num = @count(future_created)
      total_blocks = @count(blocks)
      printf("Amount of messages:\t \t %d\n", message_num)
      printf("Amount of futures created:\t %d\n", future_num)
      printf("Amount of blocked in total: \t %d \n", total_blocks)
      printf("Ratio future:message \t \t %d:%d \n", 1, message_num/future_num)

      printf("\nfuture ID: \t lifetime (us): \t time blocked (us): \t chained: \t block act: \t fulfilled:\n")
      foreach(fut in list_of_futures) {

	#stopwatches:
        time = read_stopwatch_us(fut)
	time_waiting = read_stopwatch_us(sprint("block", fut))

	#ctx id of blocked id:
	actor = actor_being_blocked[fut]

	#Fulfilled
	ful = "no"
	if(fut in future_fulfil_list) {
	  ful = "yes"
	}

	#chained:
	cha = "no"
	if(fut in chained_actor_list) {
	  cha = "yes"
	}
	
     	printf("%15d %13d %27d %15s %17d %15s \n", list_of_futures[fut], time, time_waiting, cha, actor, ful)
      }

      printf("\nactor ID: \t tot blocked:\n")
      foreach(act in actor_ctx_id_blocked) {
        printf("%s \t %d\n", act, actor_ctx_id_blocked[act])
      }
      

}