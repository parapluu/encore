# Work-stealing is how programs are parallelised in Encore and Pony.
# I want to understand how a program gets parallelised.
# When actors are moved from one core to another due to work-stealing
# Ratio of failed or successful work-stealing
# When actors and scheduled or descheduled
# I want to understand how a single actor is scheduled during its life time
# (e.g., only on one scheduler, or on many, bouncing back and forth, etc.)
#I would like to see the communication topology at the scheduler-level,
# i.e. rather than looking at what actors send messages to what other actors,
# I would like think of all the actors on a scheduler as a single actor,
# so how often are messages sent to an actor on the same scheduler,
# to actors on another scheduler, or to idle actors
# I want to be able to understand what was the “pressure”
# (e.g. number of actors in the scheduler queue) on each scheduler during a program’s execution

#____________________________Begin____________________________________________________________

global actor_number

global successful_steals
global failed_steals
global attempted_steals

global successful_steals_id
global failed_steals_id

global scheduler_from_scheduler
global sheduler_from_sheduler_count

probe process.mark("actor-alloc"){
      actor_number << 1
}

probe process.mark("work-steal-successful") {
      successful_steals << 1;
      total_steals << 1;
      successful_steals_id[sprint($arg1)] += 1

      if (sprint($arg1) in scheduler_from_scheduler) {
      	 conc_id = sprintf("%d%d")
      	 sheduler_from_sheduler_count
      }
      
            					  
}

probe process.mark("work-steal-failure") {
      failed_steals << 1;
      total_steals << 1;

      failed_steals_id[sprint($arg1)] += 1
            					  
}

#probe process.function("pony_create").return {
#      #actor_list[sprintf("%d",  $return)] = 0 
#}

probe end {
      print("\n\n")
      print("==================================================== \n")
      print("\t\t STEALS\n")
      print("==================================================== \n\n")

      print("TOTAL\n")
	print("Attempted\tSuccessful\tFailed\n")
      	ss =  @count(successful_steals)
      	fs =  @count(failed_steals)
      	as =  @count(attempted_steals)
      	printf("%d\t\t%d\t\t%d", ss, fs, as)
      print("\n\n")

      print("SUCCESSFUL STEALS\n")
      print("Scheduler ID\t\tCount\n")
      foreach(ssid in successful_steals_id)
       	 printf("%s\t\t%d\n", ssid, successful_steals_id[ssid])
      print("\n")

      print("FAILED STEALS\n")
      print("Scheduler ID\t\tCount\n")
      foreach(fsid in failed_steals_id)
        printf("%s\t\t%d\n", fsid, failed_steals_id[fsid])
      print("\n")


      print("STEALS BETWEEN SCHEDULERS\n")
}     