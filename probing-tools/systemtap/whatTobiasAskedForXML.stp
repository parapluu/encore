## A systemTap probing tool for Encore that produces data in XML-format
## Written by Joy van den EIjkhof, Ardalan Samimi, Ulf Sigvardsson
## March 2019

## Counters
## Contains how many times each probe has been called
## Uses aggregation
global actor_msg_send
global future_create
global future_block
global future_destroy
global future_fulfil_start
global future_fulfil_end
global future_get
global future_unblock
global future_chaining
global actor_msg_run
global successful_steals
global failed_steals
global total_steals


#Lists containing data corresponding to their name
#Each list corresponds to one foreach-loop in probe end

#List for counting lifetimes
global list_future_lifetime
global list_future_block_lifetime

#How many times does an Actor get blocked by any Future
global actor_block_count

#How many times does what Actor call get() on what future
global actor_get_future

#How many time does a Future block any actor
global future_block_count

#How many times is a Future chained at what Actor
global chained_actor_future_list

#How many time a Scheduler successfully steals work any other Scheduler 
global successful_steals_count

#How many times an Actor is stolen from any Scheduler
global actor_stolen

#How many time a Scheduler fails to steals work any other Scheduler 
global failed_steals_count

#What Future blocks what Future
global future_block_actor

#What Scheduler steals from what Scheduler sucess/fail
global scheduler_from_scheduler
global scheduler_from_scheduler_fail

#Counts how many core-swites have been made
global core_switch

#Keeps track of what scheduler is used by what core.
global current_sched_core



#messages
probe process.mark("actor-msg-send") {
      #Count
      actor_msg_send <<< 1;
}

probe process.mark("actor-msg-run") {
      #Count
      actor_msg_run <<< 1;
}

probe process.mark("work-steal-successful") {
      #Count
      successful_steals <<< 1;
      total_steals <<< 1;

      #Arguments from probe
      scheduler = sprint($arg1)
      victim = sprint($arg2)
      actor = sprint($arg3)

  
      successful_steals_count[scheduler] <<< 1
      actor_stolen[actor] <<< 1
      scheduler_from_scheduler[scheduler, victim] <<< 1; 

      if (cpu() != current_sched_core[scheduler]) {
      	 	core_switch <<< 1;
		current_sched_core[scheduler] = cpu()
      }
            					  
}

probe process.mark("work-steal-failure") {
      #Count
      failed_steals <<< 1;
      total_steals <<< 1;

      #Arguments from probe
      scheduler = sprint($arg1)
      victim = sprint($arg2) 

      failed_steals_count[scheduler] <<< 1
      scheduler_from_scheduler_fail[scheduler, victim] <<< 1
            					  
}


probe process.mark("future-create") {
      #Count
      future_create <<< 1;

      #Arguments from probe
      future = sprint($arg2)
      
      list_future_lifetime[future] = gettimeofday_ns()
}


probe process.mark("future-destroy") {
      #Count
      future_destroy <<< 1;

      #Arguments
      future = sprint($arg2)
      
      list_future_lifetime[future] = gettimeofday_ns()-list_future_lifetime[future]
}

probe process.mark("future-block") {
      #Count
      future_block <<< 1;

      #Arguments from probe
      actor = sprint($arg1)
      future = sprint($arg2)
      
      list_future_block_lifetime[future, actor] = gettimeofday_ns()
      actor_block_count[actor] <<< 1      
      future_block_actor[future, actor] <<< 1
      future_block_count[future] <<< 1
}

probe process.mark("future-unblock") {
      #Count
      future_unblock <<< 1;

      #Arguments from probe
      actor = sprint($arg1)
      future = sprint($arg2)
      
      list_future_block_lifetime[future, actor] = gettimeofday_ns()-list_future_block_lifetime[future, actor]
}

probe process.mark("future-get") {
     #Count
     future_get <<< 1;

     #Arguments from probe
     actor = sprint($arg1)
     future = sprint($arg2)

     actor_get_future[actor, future] <<< 1;
     
}

probe process.mark("future-fulfil-end"){
      #Count
      future_fulfil_end <<< 1;
}

probe process.mark("future-fulfil-start"){
      #Count
      future_fulfil_start <<< 1;
}

probe process.mark("future-chaining") {
      #Count
      future_chaining <<< 1;

      #Arguments from probe
      future_chained = sprint($arg2)
      actor_chained = sprint($arg1)
      
      chained_actor_future_list[actor_chained, future_chained] <<< 1;
}

probe end {
      ams = @count(actor_msg_send)
      fc = @count(future_create)
      fb = @count(future_block)
      ffs = @count(future_fulfil_start)
      ffe = @count(future_fulfil_end)
      fd = @count(future_destroy)
      fg = @count(future_get)
      fu = @count(future_unblock)
      fch = @count(future_chaining)
      amr = @count(actor_msg_run)
      ss =  @count(successful_steals)
      fs =  @count(failed_steals)
      ts =  @count(total_steals)

      print("<root>\n")
      print("<counts>\n")

      printf("\t<future-chaining count=\"%d\"/>\"\n", fch)
      printf("\t<future-block count=\"%d\"\"/>\n", fb)
      printf("\t<future-create count=\"%d\"/>\n", fc)
      printf("\t<future-destroy count=\"%d\"/>\n", fd)
      printf("\t<future-fulfil-star count=\"%d\"/>\n", ffs)
      printf("\t<future-fulfil-end count= \"%d\"/>\n", ffe)
      printf("\t<future-get count=\"%d\"/>\n", fg)
      printf("\t<future-unblock count=\"%d\"/>\n", fu) 
      printf("\t<actor-msg-send count=\"%d\"/>\n", ams)
      printf("\t<work-steal-failure count=\"%d\"/>\n", fs)
      printf("\t<actor-msg-run count=\"%d\"/>\n", amr)
      printf("\t<work-steal-successful count=\"%d\"/>\n", ss)
      printf("\t<work-steal-attempt count=\"%d\"/>\n", ts)
      printf("\t<core-switches count\"%d\"/>\n", @count(core_switch))
    
      print("</counts>\n")

      #--- LIFETIME OF FUTURE ---
      print("<futures>\n")
      foreach(fut in list_future_lifetime) {
         print("\t<future>\n")
    	 printf("\t\t<id>%s</id>\n", fut)
    	 printf("\t\t<duration>%d</duration>\n", list_future_lifetime[fut])
    	 print("\t</future>\n")
      }
      print("</futures>\n")

      #Future blocking:
      print("<future-blocks>\n")
      
      #--- LIFETIME OF A FUTURE BLOCK ---
      foreach([fut, act] in list_future_block_lifetime) {
	 print("\t<future-block-lifetime>\n")

   	 print("\t\t<future>\n")
    	 printf("\t\t<id>%s</id>\n", fut)	 
    	 print("\t\t</future>\n")

    	 print("\t\t<actor>\n")
    	 printf("\t\t\t<id>%s</id>\n", act)
    	 print("\t\t</actor>\n")
	 
    	 printf("\t\t<duration>%d</duration>\n", list_future_block_lifetime[act, fut])	 
    	 print("\t</future-block-lifetime>\n")

      }

      #---NUMBER OF TIMES ACTOR CALLS GET ON FUTURE--- ##THISIS whre you stopp
      print("Actor addr\t\tFuture Addr\t\tCount\n")
      foreach ([act, fut] in actor_get_future) {
      	      printf("%s\t\t%s\t\t%d\n", act, fut, @count(actor_get_future[act, fut]))
      }


      print("\n--- WHAT FUTURE BLOCKED WHAT ACTOR ---\n")
      print("Future Addr\t\tActorr Addr\t\tCount\n")
      foreach([fut, actor] in future_block_actor) {	
      	printf("%s\t\t%s\t\t%d\n", fut, actor, @count(future_block_actor[fut, actor]))	  
      }

      
      print("\n--- NUMBER OF TIMES AN ACTOR IS BLOCKED ---\n")
      print("Actor Addr\t\tCount\n")
      foreach(act in actor_block_count) {
        printf("%s\t\t%d\n", act, @count(actor_block_count[act]))
      }

  
      print("\n--- NUMBER OF TIMES A FUTURE BLOCKS ---\n")
      print("Future Addr\t\tCount\n")
      foreach(fut in future_block_count) {
        printf("%s\t\t%d\n", fut, @count(future_block_count[fut]))
      }

      print("\n--- WHAT FUTURES CHAINES AT WHAT ACTOR ---\n")
      print("Actor Addr\t\tFuture Addr\t\tCount\n")
      foreach([act, fut] in chained_actor_future_list) {
        printf("%s\t\t%s\t\t%d\n",act, fut, @count(chained_actor_future_list[act, fut]))
      }

      print("\n---SUCCESSFUL STEALS---\n")
      print("Scheduler\t\tCount\n")
      foreach(ssid in successful_steals_count) {
       	 printf("%s\t\t%d\n", ssid, @count(successful_steals_count[ssid]))
      }

      print("\n---FAILED STEALS---\n")
      print("Scheduler\t\tCount\n")
      foreach(fsid in failed_steals_count) {
        printf("%s\t\t%d\n", fsid, @count(failed_steals_count[fsid]))
      }

      print("\n---STEALS BETWEEN SCHEDULERS---\n")
      print("Stolen by\t\tStolen from\t\tCount\n")
      foreach([steal, victim] in scheduler_from_scheduler) {
      	printf("%s\t\t%s\t\t%d\n", steal, victim, @count(scheduler_from_scheduler[steal, victim]))
      }

      print("\n---FAILS BETWEEN SCHEDULERS---\n")
      print("Attempted by\t\tTarget\t\t\tCount\n")
      foreach([steal, victim] in scheduler_from_scheduler_fail) {
      	printf("%s\t\t%s\t\t%d\n", steal, victim, @count(scheduler_from_scheduler_fail[steal, victim]))
      }

      print("\n---STOLEN ACTORS---\n")
      print("Actor ID\t\tTimes Stolen\n")
      foreach(actor in actor_stolen) {
         printf("%s\t\t%d\n", actor,  @count(actor_stolen[actor]))
      }
      
}