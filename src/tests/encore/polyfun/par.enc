import ParT.ParT

fun pCreateTuple[v, k](key : k, value : v) : (k, v)
  (key, value)
end

fun id[a](item : a) : a
  item
end

fun constInt[b](x : b) : int
  30
end

fun parametricResult[z](x : int) : Maybe[z]
  Nothing
end

fun aToMaybeB[a, b](item : a) : Maybe[b]
  Nothing
end

fun stringAddSpace(item : Maybe[String]) : Maybe[String]
  match item with
    case Just(s) =>
      Just(s.concatenate(" space added!"))
    end
    case Nothing =>
      Just("stringAddSpace creates 'Maybe String'")
    end
  end
end

fun stringAddHello(item : Maybe[String]) : String
  match item with
    case Just(s) =>
      s.concatenate("\nHello world!")
    end
    case Nothing =>
      "ERROR: this should have been a 'Hello World' string"
    end

  end
end

fun createNewParT[t](v : t) : Par[t]
  liftv(v)
end

fun extractPar[t](par : Par[t]) : [t]
  extract(par)
end

fun joinPar[t](par : Par[Par[t]]) : Par[t]
  join(par)
end

fun sequencePipeline[t](par : Par[t]) : Par[String]
  let
    text = ": end of the Party"
    p1 = par >> (constInt[t]) >> (parametricResult[String]) >> (stringAddSpace) >> (stringAddHello) >> (fun (s : String)
                                                                                                          s.to_upper()
                                                                                                        end)
    p2 = liftv(42) >> (fun (s : int) => string_from_int(s)) >> (id[String]) >> (fun (s : String) => s.concatenate(text))
    pClosure = par >> (fun (s : t) => id[t](s))
    f = (new Test[String]("kiko")) ! getArg()
    pfut = liftf(f) >> (id[String])
  in
    p1 ||| p2 ||| pfut
  end
end

fun joinParTest[p](v : p) : Par[p]
  let
    v1 = liftv(liftv(v))
    ft = liftf((new Test[p](v)) ! getArg())
  in
    joinPar[p](liftv[Par[p]](ft)) ||| joinPar[p](v1)
  end
end

fun fAppend[t](x : t, y : t) : [t]
  [x, y]
end

active class Test[a]
  var arg : a

  def init(arg : a) : unit
    this.arg = arg
  end

  def getArg() : a
    this.arg
  end
end

active class Main
  def main() : unit
    let
      testSequence = sequencePipeline[int](liftv(42))
      result = extractPar[String](testSequence)
    in
      repeat i <- |result| do
        println(result(i))
      end
    end

    val testJoin = extractPar[int](joinParTest[int](20))
    repeat i <- |testJoin| do
      println(testJoin(i))
    end
  end
end
