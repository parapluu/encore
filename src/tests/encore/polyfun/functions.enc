def id<a>(item: a): a
  item

def compose<s, t, u>(f : s -> t, g : t -> u) : s -> u
  \(x : s) -> g(apply<s, t>(f, x))

def apply<a, b>(fn: a -> b, x: a): b
  fn(x)

def pSingleArgument<t>(arg1: t, arg2: int, arg3: t): t
  arg3

def pRecursiveCall<t>(arg1: t, counter: int): Maybe t
  if counter == 0 then
    Just arg1
  else
    pRecursiveCall<t>(arg1, counter-1)

def helperForNestedFunction<a>(x: a): a
  x

def pNestedFunction<t>(x: t): t
  helperForNestedFunction<t>(x)

class Main
  def main() : void {
    val test1 = pSingleArgument<String>("test single argument", 42, "single");
    print(test1);

    val pNested = pNestedFunction<String>("test passing parametric type between parametric functions");
    print(pNested);

    let testRecursiveName = "test calling function recursively"
        pRecursive = pRecursiveCall<String>(testRecursiveName, 20)
    in {
      match pRecursive with
         Just result => print(result)
         Nothing => print("Error in function pRecursiveCall, expected output: '{}'", testRecursiveName)
    };

    val compFn = compose<String, String, String>(id<String>, id<String>);
    print compFn("42");
  }
