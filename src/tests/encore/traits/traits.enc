-- This file was automatically converted by encorec

fun push_to(x : Push) : int -> unit
  let
    y = x
  in
    fun (n : int) => y.push(n)
  end
end
fun foo(x : Pop) : unit
  println(x.pop())
end
trait Push
  require var top : Link
  def push(x : int) : unit
    this.top = new Link(x, this.top)
  end
end
trait Pop
  require var top : Link
  def pop() : int
    let
      result = this.top.value
    in
      this.top = this.top.next
      result
    end
  end
end
passive class Link
  var value : int
  var next : Link
  def init(v : int, n : Link) : unit
    this.value = v
    this.next = n
  end
end
passive class Stack : Push + Pop
  var top : Link
  def steal(other : Pop) : unit
    var x = other
    x = other
    this.push(x.pop())
  end
end
class Driver
  var myPop : Pop
  var myStack : Stack
  def go(x : Stack, y : Pop) : unit
    this.myPop = x
    this.myStack = x
    x.push(42)
    x.steal(y)
  end
  def doPop() : int
    this.myPop.pop()
  end
  def getStack() : Stack
    this.myStack
  end
end
class Main
  def main() : unit
    let
      x = new Stack
      y = new Stack
      driver = new Driver
      push_to = fun (p : Push) => fun (x : int) => p.push(x)
      pushY = push_to(y)
    in
      pushY(100)
      get(driver ! go(x, y))
      println(get(driver ! doPop()))
      foo(x)
      println("Done!")
    end
  end
end
