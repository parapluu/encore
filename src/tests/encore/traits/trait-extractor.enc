trait Result<b>
  require Success() : Maybe b
  def Fail() : Maybe int
    Nothing

passive class Success<b> : Result<b>(data)
  data : b
  def init(data : b) : void
    this.data = data

  def Success() : Maybe b
    Just this.data

class Main
  foo : Result<int>
  def main() : void {
    this.foo = new Success<int>(5);
    match this.foo with
      Fail(n) => print("This shouldn't happen!")
      Success(x) => println("It's a success! The resulting value is {}", x)
  }
