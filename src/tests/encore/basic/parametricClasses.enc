def id<a>(x: a): a x

class Cell<a>
  value : a
  def init(value : a) : void
    this.value = value

  def getVal() : a
    this.value

  def getVal2() : void
    new Cell<a>(this.value)

  def clone(value : a): void
    new Cell<a>(value)

class Pair<a, b>
  fst : a
  snd : b
  def init(fst : a, snd : b) : void{
    this.fst = fst;
    this.snd = snd;
  }
  def getFst() : a
    this.fst

  def getSnd() : b
    this.snd

  def getCustom<d, g>(z: a, x: d, y: g): Maybe d {
    id(x);
    -- test that it works with explicit parametric type
    this.liftJust<d>(x);

    -- test that it can infer the type
    this.liftJust<int>(34);
    this.liftJust(34);

    this.liftJust(x);
  }

  def liftJust<d>(x: d): Maybe d { Just x; }

  def testMethodInference<d, g>(x: g, y: d): void {
    this.getCustom(this.fst, y, x);
    this.getCustom(this.fst, x, y);
  }

class Main
  def main() : void{
    let p = new Pair<int, String>(42, "fortytwo")
        c = new Cell<Pair<int, String>>(p)
        pp = get c.getVal()
        d = p.getCustom<int, String>(23, 5, "")
    in {
      p!getCustom<int, String>(23, 5, "");
      print get pp.getFst();
      print get pp.getSnd();
      match (get d) with
        Just x => print x
        Nothing => print "Error"
    };
  }
