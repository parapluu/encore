trait AB<a, b> {
  require aa : a
  require bb : b

  def fn(aa : a) : b {
    this.aa = aa;
    this.bb
  }
}

passive class Foo<a, b> : AB<a, b> {
  aa : a
  bb : b

  def init(aa : a, bb : b) : void {
    this.aa = aa;
    this.bb = bb;
  }
}

passive class Bar<b, c> {
  foo : AB<b, c>

  def init(bb : b, cc : c) : void {
    this.foo = new Foo<b, c>(bb, cc);
  }

  def fn(bb : b) : c {
    this.foo.fn(bb)
  }
}

class Main {
  def main() : void {
    let bar = new Bar<real, int>(3.14, 42) in {
      println("assert(bar.fn(4.13) == 42): {}", bar.fn(4.13))
    }
  }
}
