def max(a: Array<int>): int
  let m = a[0] in {
    for i in [1 .. |a|]
      if a[i] > m then
	m = a[i];
    m
   }     

-- Multi dimensional arrays can be viewed as one-dimensional arrays!
def viewMultiDimAsSingleDim(): void
  let a = [[-1,-11,3], [3,5,0]] in
    print max(a)


-- Repeated index operations should parse!
def jaggedIndexing(): void
  let a = new Array<Array<int>>(1) in
    {
      a[0] = new Array<int>(1);
      a[0][0] = 3;
      print a[0][0]
    }


def multiDimAcces(): void
  let n = 2
      m = 3
      arr = new Array2<int>(n, m)
  in {
    repeat i <- |arr|
      repeat j <- |arr[i]|
        arr[i,j] = m * i + j;
    repeat i <- |arr|
      repeat j <- |arr[i]|
	print arr[i,j]
  }

def multiDimLiteral(): void
  let a = [["one", "two"], ["three", "four"], ["five", "six"]] in
    repeat i <- |a|
      repeat j <- |a[i]|
        print a[i,j]
	
class Foo
  def return() : [int]
    new [int](10)
  def foo(m:Main) : void
    let
      a = this.return()
    in {
      repeat i <- 10
        a[i] = i;
      m ! continue(a)
    }

class Main
  def continue(a:[int]) : void
    let
        b = ["foo", "bar"]
    in {
      repeat i <- |a|
        print a[i];
      print b[0];
      print b[1];
    }

  def main() : void
    let
      x = new Foo
    in {
      viewMultiDimAsSingleDim();
      jaggedIndexing();
      multiDimAcces();
      multiDimLiteral();
      x ! foo(this)
      }
