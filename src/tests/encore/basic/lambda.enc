class CreditCard

  def printX(): void
    print 42

  def printMain(m: Main, x: int): void
    m.pprint(x)

passive class CreditPass
  fi: int -> void
  fii: int -> int

  def init(fi: int -> void, fii: int -> int): void {
    this.fi = fi;
    this.fii = fii;
  }

  def testFi(x: int): void
    let fi = this.fi in
      fi(x)

  def testFii(x: int): void
    let fii = this.fii in
      print fii(x)

  def pass(c: CreditCard): void
    get c.printX()

  def passMain(m: Main): void
    m.pprint(42)

-- Including an active class in the environment of the closure used to throw
-- an error. Do not remove x from here, the ff lambda tests that the compilation
-- succeeds and runs
class Main
  creditcard: CreditCard

  def pprint(x: int): void
    print x

  def main(): void {
    let x = new CreditCard
        p = new CreditPass
        p2 = new CreditPass(\(x:int)->{print x}, \(x: int)-> x+1)
        show = \(i: int) -> print i
        ff = \(z: int) -> { get x.printX();
                            x.printMain(this, 42);
                            p.pass(x);
                            show(z);
                            p.passMain(this);
                            this.pprint(42);
                            this.creditcard.printX();
                          }
     in {
      this.creditcard = x;
      ff(42);
      show(42);
      p2.testFi(42);
      p2.testFii(41);
    }
  }
