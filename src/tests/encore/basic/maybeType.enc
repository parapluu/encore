def fun(x: Maybe t): Maybe t {
  Nothing
}

def nothing(x: Maybe int) : int {
  let y = Nothing : Maybe int
      z = Just 32
  in {
    x = y;
    y = Just 23;
    y = x;
    y = z;
    x = Nothing : Maybe int;
    y;
    match x with {
    	Just z => 23
        Nothing => 34
    }
  }
}

def another(x: Maybe int) : Maybe int {
--  x = Nothing;
  x
}

def other(x: Maybe int): Maybe int
  let x = Nothing in x

def testing() : Maybe int
  Just 32

-- class Test
--   z: Maybe int

--   def init(x: Maybe int): void
--     this.z = x

--   def other(x: Maybe int) : Maybe int
--     x

class Main
  def main(): int {
    let x = Nothing : Maybe int
        y = Just 24
        -- z = new Test(y)
    in {
      -- new Test(x);
      nothing(y);
      nothing(Nothing);
      nothing(Just 32);
    };
    fun(Nothing);
   let
	 -- x = Just 32
       x = Just Just 32
   in {
      match Just testing() with {
       Just Just z => 32
       Just Nothing => 23
        Nothing => 22
       }
    }
  }
