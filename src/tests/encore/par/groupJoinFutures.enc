-- This file was automatically converted by encorec

import ParT.ParT

active class Person
  var name : String

  def init(name : String) : unit
    this.name = name
  end

  def getName() : String
    this.name
  end

end

read class Pet
  val name : String
  val owner : Person

  def init(n : String, o : Person) : unit
    this.name = n
    this.owner = o
  end

end

active class Main
  def main() : unit
    val magnus = new Person("Magnus")
    val terry = new Person("Terry")
    val charlotte = new Person("Charlotte")

    val barley = new Pet("Barley", terry)
    val boots = new Pet("Boots", terry)
    val whiskers = new Pet("Whiskers", charlotte)
    val daisy = new Pet("Daisy", magnus)

    val people = each([magnus, terry, charlotte])
    val pets = each([barley, boots, whiskers, daisy])

    val query = groupJoin(people,
                          pets,
                          fun (p : Person) => get(p ! getName()),
                          fun (p : Pet) => get(p.owner ! getName()),
                          fun (per : Person, animals : Par[Pet])
                            val personName = liftf(per ! getName())
                            personName >> (fun (name : String)
                                             (name, animals >> (fun (p : Pet) => p.name))
                                           end)
                          end,
                          fun (s1 : String, s2 : String) => s1.compare(s2))

    for elem <- extract(query) do
      match elem with
        case (name, pets) =>
          println("{}:", name)
          for pet <- extract(pets) do
            println("{}", pet)
          end
        end
      end
    end
  end

end
