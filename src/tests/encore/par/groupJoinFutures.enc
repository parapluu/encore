import ParT.ParT

class Person {
  name: String

  def init(name: String): void this.name = name
  def getName(): String this.name
}

passive class Pet {
  name: String
  owner: Person
  def init(n: String, o: Person): void {
    this.name = n;
    this.owner = o;
  }
}

class Main
  def main(): void {
    val magnus = new Person("Magnus");
    val terry = new Person("Terry");
    val charlotte = new Person("Charlotte");

    val barley = new Pet("Barley", terry);
    val boots = new Pet("Boots", terry);
    val whiskers = new Pet("Whiskers", charlotte);
    val daisy = new Pet("Daisy", magnus);

    val people = each([magnus, terry, charlotte]);
    val pets = each([barley, boots, whiskers, daisy]);
    val query = groupJoin(people,
                          pets,
                          (\(p: Person) -> get(p.getName())),
                          (\(p: Pet) -> get(p.owner.getName())),
                          (\(per: Person, animals: Par Pet) -> {
                            val personName = liftf(per.getName()); -- Par Person
                            personName >>
                              \(name: String) -> {
                                (name, animals >> (\(p: Pet) -> p.name))
                              }
                          }),
                          (\(s1: String, s2: String) -> s1.compare(s2)));
    for elem in extract(query) {
      match elem with
        (name, pets) => {
          println("{}:", name);
          for pet in extract(pets) {
            println("{}", pet);
          }
        }
    }
  }
