import ParT.ParT

fun liftValues(max : int) : Par[int]
  var p = empty[int]()
  repeat i <- max do
    p = p ||| liftv(i)
  end
  p
end

fun liftFutureValues(max : int) : Par[int]
  var p = empty[int]()
  repeat i <- max do
    p = p ||| liftf(new T ! set(i))
  end
  p
end

fun lessThanOneHundred(x : int) : bool
  x < 100
end

fun printResult(m : bool) : unit
  println("{}", m)
end

active class T
  def set(x : int) : int
    x
  end
end

active class Main
  def testValues() : unit
    println("Testing Values:")
    val p = liftValues(100)
    val f = all(p, lessThanOneHundred)
    printResult(get(f))
    val p2 = liftValues(200)
    val f2 = all(p2, lessThanOneHundred)
    printResult(get(f2))
    printResult(get(all(empty[int](), lessThanOneHundred)))
  end

  def testFutures() : unit
    println("Testing Futures:")
    val p = liftFutureValues(100)
    val f = all(p, lessThanOneHundred)
    printResult(get(f))
    val p2 = liftFutureValues(200)
    val f2 = all(p2, lessThanOneHundred)
    printResult(get(f2))
  end

  def main() : unit
    this.testValues()
    this.testFutures()
  end
end
