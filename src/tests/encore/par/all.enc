import ParT.ParT

def liftValues(max: int): Par int {
  var p = empty<int>();
  repeat i <- max {
    p = p || liftv(i);
  };
  p
}

def liftFutureValues(max: int): Par int {
  var p = empty<int>();
  repeat i <- max {
    p = p || liftf((new T).set(i));
  };
  p
}

class T {
  def set(x: int): int
    x
}

def lessThanOneHundred(x: int): bool
  x < 100

def printResult(m: bool): void
  println("{}", m)

class Main
  def testValues(): void {
    println("Testing Values:");
    val p = liftValues(100);
    val f = all(p, lessThanOneHundred);
    printResult(get(f));

    val p2 = liftValues(200);
    val f2 = all(p2, lessThanOneHundred);
    printResult(get(f2));

    printResult(get(all(empty<int>(), lessThanOneHundred)));
  }

  def testFutures(): void {
    println("Testing Futures:");
    val p = liftFutureValues(100);
    val f = all(p, lessThanOneHundred);
    printResult(get(f));

    val p2 = liftFutureValues(200);
    val f2 = all(p2, lessThanOneHundred);
    printResult(get(f2))
  }

  def main(): void {
    this.testValues();
    this.testFutures();
  }
