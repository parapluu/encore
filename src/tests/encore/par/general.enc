def show(b: bool): void
  print b

-- combinator
def check_numbers(numbers: String): bool
  if (numbers.equals("INVALID_CARD")) then false
  else true

-- combinator
def check_name(name: String): bool
  if (name.equals("FRANCISCO FERNANDEZ REYES")) then true
  else false

-- combinator
def check_profile(purchases: [String]): bool
  let suspicious_purchase = false in {
    repeat i <- |purchases| {
      if ((purchases[i]).equals("Online")) then
        suspicious_purchase = true
    };
    suspicious_purchase
  }

class CreditCard
  name: String
  card_number: String
  purchases: [String]

  def init(name: String, card_number: String, purchases: [String]): void {
    this.name = name;
    this.card_number = card_number;
    this.purchases = purchases;
  }

  def check(): Par bool
    liftv true

  def checkP(): Par (Par bool)
    liftv (liftv true)

class Main

  def main(): void
    let c = new CreditCard("KIKO FERNANDEZ REYES", "INVALID_CARD",
                           ["Online", "Clothes", "Food", "Party"])
        par_check_anomalies = liftv (get c.check())
	x = extract(liftv true)
    in {
        (liftv true) >> show;
        (join (liftv (liftv true))) >> show;
        (join (liftf c.check())) >> show;
        (join (par_check_anomalies || par_check_anomalies)) >> show;
        (join (join (liftf c.checkP()))) >> show;
        for itemp in x
          print itemp;
    }
