import ParT.ParT

fun show_string(x : String, const : String, type : String) : unit
  if x.equals(const) then
    print("{} {}: OK\n", x, type)
  else
    print("{} {}: ERROR\n", const, type)
  end
end

fun show_passive(x : PassiveTest, const : String, type : String) : unit
  if x.elem.equals(const) then
    print("{} {}: OK\n", x.elem, type)
  else
    print("{} {}: ERROR\n", x.elem, type)
  end
end

fun primitive_const() : String
  "Primitive Test"
end

fun passive_const() : String
  "Passive Test"
end

read class PassiveTest
  val elem : String
  def init() : unit
    this.elem = "Liftv"
  end
end

active class Main
  def test_primitive_liftv() : unit
    let
      primitive_par = liftv("Liftv")
    in
      primitive_par >> fun (x : String) => show_string(x, "Liftv", primitive_const())
    end
  end

  def test_passive_liftv() : unit
    let
      passive_par = liftv(new PassiveTest())
    in
      passive_par >> fun (x : PassiveTest) => show_passive(x, "Liftv", passive_const())
    end
  end

  def test_function_liftv(): unit
    let fnPar = liftv(fun(x: String) => x) in
      app(fnPar, "Lift Function To ParT") >> fun(x: String) => println("{}: OK\n", x)
    end
  end

  def main(): unit
    this.test_primitive_liftv()
    this.test_passive_liftv()
    this.test_function_liftv()
  end
end
