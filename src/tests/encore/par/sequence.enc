import ParT.ParT

fun assertEqualsPassive(p : PObject, tag : String) : unit
  assertTrue(p.tag.equals(tag))
end

fun inc(i : int) : int
  i + 4
end

fun dec(i : int) : int
  i - 4
end

fun incPar(p : Par[int]) : Par[int]
  p >> inc
end

fun updatePassivePlusFive(pass : PObject) : PObject
  pass.updateValuePlusFive(pass.value)
end

fun updateParPlusFive(par : Par[PObject]) : Par[PObject]
  par >> updatePassivePlusFive
end

active class AObject
  def ints() : int
    21
  end

  def intsPar() : Par[int]
    liftv(21)
  end

  def intsFut() : Fut[int]
    let
      that = this
    in
      that ! ints()
    end
  end

  def passivePar() : Par[PObject]
    liftv(new PObject(32))
  end
end

read class PObject
  val tag : String
  val value : int

  def init(value : int) : unit
    this.tag = "TAG"
    this.value = value
  end

  def getValue() : int
    this.value
  end

  def setValue(v : int) : PObject
    new PObject(v)
  end

  def updateValuePlusFive(value : int) : PObject
    new PObject(value + 5)
  end
end

active class Main
  def test_value_primitive() : unit
    let
      int_value = 32
      par_int = liftv(int_value) >> inc >> inc >> dec >> inc
      par_par_int = liftv(liftv(int_value)) >> incPar >> incPar
      testfn = fun (v : int) => assertTrue(v == 40)
    in
      par_int >> testfn
      par_par_int >> fun (p : Par[int]) => p >> testfn
    end
  end

  def test_value_passive() : unit
    let
      pass_value1 = new PObject(42)
      default_tag = "TAG"
      default_value = 42
      par_passive = liftv(pass_value1) >> updatePassivePlusFive >> updatePassivePlusFive
    in
      par_passive >> fun (v : PObject)
                       assertEqualsPassive(v, default_tag)
                       assertTrue(pass_value1.value == default_value, "ERROR in function assertEqualsPassive, expected {}", default_value)
                     end
    end
  end

  def test_value_passive_par_par() : unit
    let
      pass_value1 = new PObject(32)
      pass_value2 = new PObject(32)
      pass_value3 = new PObject(32)
      expected_tag = "TAG"
      expected_val1 = 42
      expected_val2 = 47
      expected_val3 = 32
      par_par_pass1 = liftv(liftv(pass_value1)) >> updateParPlusFive
      par_par_pass2 = par_par_pass1 ||| liftv(liftv(pass_value2)) >> updateParPlusFive
      par_par_pass3 = par_par_pass2 >> updateParPlusFive ||| liftv(liftv(pass_value3))
      testfn = fun (v : PObject)
                 assertEqualsPassive(v, expected_tag)
                 assertTrue(v.value == expected_val1 || v.value == expected_val2 || v.value == expected_val3, "ERROR in function assertEqualsPassive: {}", v.value)
               end
      testfnPar = fun (p : Par[PObject]) => p >> testfn
    in
      par_par_pass3 >> testfnPar
    end
  end

  def test_future_primitive() : unit
    let
      o = new AObject
      expected_value1 = 33
      expected_value2 = 21
      testfn = fun (v : int)
                 assertTrue(v == expected_value1 || v == expected_value2, "ERROR in 'test_future_primitive', found {}, expected {} or {}", v, expected_value1, expected_value2)
               end
      pfut1 = liftf(o ! ints()) >> inc >> inc >> dec >> inc
      pfut2 = liftf(o ! ints()) >> dec >> dec >> inc
      pfut_final = pfut1 ||| pfut2 >> inc >> inc >> dec
    in
      for v <- extract(pfut_final) do
        testfn(v)
      end
    end
  end

  def test_future_primitive_par_par() : unit
    let
      o = new AObject
      expected_value1 = 37
      expected_value2 = 29
      ppfut1 = liftv(liftf(o ! ints())) >> incPar >> incPar
      ppfut2 = liftv(liftf(o ! ints()))
      testfn = fun (v : int)
                 assertTrue(v == expected_value1 || v == expected_value2, "ERROR in 'test_future_primitive_par_par_seq', expected {} or {}, found {}", expected_value1, expected_value2, v)
               end
      testfnPar = fun (p : Par[int]) => p >> testfn
      ppfinal = ppfut1 ||| ppfut2 >> incPar >> incPar
    in
      for v <- extract(ppfinal) do
        testfnPar(v)
      end
    end
  end

  def test_future_par_primitive() : unit
    let
      o = new AObject
      expected_value = 33
      testfn = fun (v : int)
                 assertTrue(v == expected_value, "ERROR in 'test_future_par_primitive', expected {}, found {}", expected_value, v)
               end
      testfnPar = fun (p : Par[int]) => p >> testfn
      parfut = liftf(o ! intsPar()) >> incPar >> incPar >> incPar
    in
      for v <- extract(parfut) do
        testfnPar(v)
      end
    end
  end

  def test_combine_primitive_futures_into_par_sequence() : unit
    let
      o = new AObject
      expected1 = 25
      expected2 = 33
      expected3 = 37
      pfut_int = liftf(o ! ints()) >> inc >> dec
      ppfut_int = liftv(liftf(o ! ints())) >> incPar >> incPar
      ppfut2_int = liftv(liftf(o ! ints())) >> incPar >> incPar
      parfut = liftf(o ! intsPar()) >> incPar >> incPar >> incPar
      p1 = liftv(pfut_int) ||| ppfut_int ||| parfut ||| ppfut2_int >> incPar
      testfn = fun (v : int)
                 assertTrue(v == 21 || v == expected1 || v == expected2 || v == expected3, "ERROR in 'test_combine_primitive_futures_into_par_sequence', found {}", v)
               end
      testfnPar = fun (p : Par[int]) => p >> testfn
    in
      for v <- extract(p1) do
        testfnPar(v)
      end
    end
  end

  def test_future_passive_par() : unit
    let
      a = new PObject(32)
      b = new PObject(32)
      expected1 = 37
      expected2 = 42
      p1 = liftv(a) >> updatePassivePlusFive
      p2 = liftv(b)
      p3 = p1 ||| p2 >> updatePassivePlusFive
    in
      for v <- extract(p3) do
        assertTrue(expected1 == v.getValue() || expected2 == v.getValue(), "ERROR in 'test_future_passive_par', found {}", v.getValue())
      end
    end
  end

  def test_future_passive_par_par() : unit
    let
      a = liftf(new AObject ! passivePar())
      b = new PObject(32)
      expected = 42
      p1 = a >> updateParPlusFive
      p2 = liftv(liftv(b)) >> updateParPlusFive
      p3 = p1 >> updateParPlusFive
      testfn = fun (v : PObject)
                 assertTrue(expected == v.getValue(), "ERROR in 'test_future_passive_par_par', found {}", v.getValue())
               end
      testfnPar = fun (p : Par[PObject]) => p >> testfn
    in
      for v <- extract(p3) do
        testfnPar(v)
      end
    end
  end

  def test_par_primitive() : unit
    let
      a = new AObject
      fut_par = liftf(a ! ints())
      par_int = liftv(42) ||| liftv(42)
      ppar_int = par_int ||| par_int >> inc
      par_mixed_with_fut = ppar_int ||| fut_par >> inc
      expected1 = 42
      expected2 = 46
      testfn1 = fun (v : int)
                  assertTrue(v == expected1, "ERROR in 'test_par_primitive', extracting 'par_int'")
                end
      testfn2 = fun (v : int)
                  assertTrue(v == expected2, "ERROR in 'test_par_primitive', extracting 'ppar_int'")
                end
      testfn3 = fun (v : int)
                  assertTrue(v == 50 || v == 25, "ERROR in 'test_par_primitive', extracting 'par_mixed_with_fut'")
                end
    in
      par_int >> testfn1
      ppar_int >> testfn2
      par_mixed_with_fut >> testfn3
    end
  end

  def test_par_passive() : unit
    let
      o1 = new PObject(32)
      o2 = new PObject(32)
      p1 = liftv(o1) >> updatePassivePlusFive
      p2 = liftv(o2) >> updatePassivePlusFive >> updatePassivePlusFive
      p12 = p1 ||| p2 >> updatePassivePlusFive
      expected1 = 42
      expected2 = 47
    in
      for v <- extract(p12) do
        assertTrue(v.getValue() == expected1 || v.getValue() == expected2, "ERROR in 'test_par_passive', found {}", v.getValue())
      end
    end
  end

  def test_future_to_par_of_primitive_type() : unit
    let
      a = new AObject
      futpar = liftf(a ! intsPar())
      pfinal = join(futpar) >> inc
      expected = 25
    in
      for v <- extract(pfinal) do
        assertTrue(v == expected, "ERROR in 'test_future_to_par_of_primitive_type', found {}", v)
      end
    end
  end

  def test_join_primitive() : unit
    let
      a = new AObject
      expected1 = 29
      expected2 = 33
      expected3 = 50
      parvv = liftv(liftv(42))
      futpar = liftf(a ! intsPar()) >> incPar
      pp1 = futpar ||| parvv >> incPar
      pp2 = pp1 ||| futpar >> incPar
      pfinal = join(pp2)
    in
      for v <- extract(pfinal) do
        assertTrue(v == expected1 || v == expected2 || v == expected3, "ERROR in 'test_join_primitive', found {}", v)
      end
    end
  end

  def test_join_future_par_primitive() : unit
    let
      a = new AObject
      expected1 = 29
      expected2 = 33
      expected3 = 37
      expected4 = 50
      parvv = liftv(liftv(42))
      futpar = liftf(a ! intsPar()) >> incPar
      fp_join = liftv(join(futpar)) >> incPar
      pp1 = futpar ||| parvv ||| fp_join >> incPar
      pp2 = pp1 ||| futpar >> incPar
      pfinal = join(pp2)
    in
      for v <- extract(pfinal) do
        assertTrue(v == expected1 || v == expected2 || v == expected3 || v == expected4, "ERROR in 'test_join_future_par_primitive', found {}", v)
      end
    end
  end

  def test_value() : unit
    this.test_value_primitive()
    this.test_value_passive()
    this.test_value_passive_par_par()
  end

  def test_future() : unit
    for i <- [1..100] do
      this.test_future_primitive()
      this.test_future_primitive_par_par()
      this.test_future_par_primitive()
      this.test_combine_primitive_futures_into_par_sequence()
      this.test_future_passive_par()
      this.test_future_passive_par_par()
    end
  end

  def test_par() : unit
    for i <- [1..100] do
      this.test_par_primitive()
      this.test_par_passive()
    end
  end

  def test_future_to_par() : unit
    this.test_future_to_par_of_primitive_type()
  end

  def test_join() : unit
    this.test_join_primitive()
    this.test_join_future_par_primitive()
  end

  def main() : unit
    for i <- [1..100] do
      this.test_value()
      this.test_future()
      this.test_par()
      this.test_future_to_par()
      this.test_join()
    end
  end
end
