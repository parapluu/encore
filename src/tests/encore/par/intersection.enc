-- This file was automatically converted by encorec

import ParT.ParT
fun cmp(x : int, y : int) : int
  if x > y then
    1
  else
    if x < y then
      -(1)
    else
      0
    end
  end
end
fun cmpX(x : X, y : X) : int
  x.s.compare(y.s)
end
read class X
  val s : String
  def init(s : String) : unit
    this.s = s
  end
  def getS() : String
    this.s
  end
end
active class T
  def getValue(x : int) : int
    x
  end
  def getPar(x : int) : Par[int]
    liftv(x)
  end
end
active class Main
  def futures() : unit
    val p1 = liftf(new T ! getValue(12)) ||| liftv(23)
    val p2_l = liftf(new T ! getValue(23))
    val p2_r = liftf(new T ! getPar(42))
    val p2 = p2_l ||| liftv(2) ||| liftv(2) ||| liftv(3) ||| join(p2_r)
    val result = intersection(p1, p2, cmp)
    for v <- extract(result) do
      print("Results: {}\n", v)
    end
  end
  def values() : unit
    val p1 = liftv(12) ||| liftv(42) ||| liftv(1) ||| liftv(0)
    val p2 = liftv(23) ||| liftv(1)
    val p3 = liftv(23) ||| join(liftv(liftv(42))) ||| p2
    val result = intersection(p1, p3, cmp)
    for v <- extract(result) do
      print("Results: {}\n", v)
    end
  end
  def objects() : unit
    val fp1 = liftv(new X("Test")) ||| liftv(new X("Life"))
    val fp2 = liftv(new X("Life"))
    val result = intersection(fp1, fp2, cmpX)
    for v <- extract(result) do
      print("Results: {}\n", v.s)
    end
  end
  def main() : unit
    println("Running intersection on values")
    this.values()
    println("Running intersection on futures and futures to par")
    this.futures()
    println("Running intersection on objects")
    this.objects()
  end
end
