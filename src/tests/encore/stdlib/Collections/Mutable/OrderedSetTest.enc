
import Collections.Mutable.OrderedSet

fun getEmpty() : OrderedSet[int]
  let
    cmp = fun (x : int, y : int) => if x == y then
                                      0
                                    else
                                      if x < y then
                                        -(1)
                                      else
                                        1
                                      end
                                    end
  in
    new OrderedSet[int](cmp)
  end
end
fun get123() : OrderedSet[int]
  let
    os = getEmpty()
  in
    os.add(2)
    os.add(1)
    os.add(3)
    os
  end
end
fun testInit() : bool
  let
    os = getEmpty()
  in
    true
  end
end
fun testAdd() : bool
  let
    os = get123()
  in
    true
  end
end

fun testSize() : bool
  get123().size() == 3
end

fun testGetMinEmpty() : bool
  getEmpty().get_min() == Nothing
end

fun testGetMin123() : bool
  match getEmpty().get_min() with
    case Just(x) =>
      false
    end
    case Nothing =>
      true
    end
  end
end

fun testGetIterInit() : bool
  get123().iter()
  true
end

fun testHasNextEmpty() : bool
  not(getEmpty().iter().has_next())
end

fun testHasNext123() : bool
  let
    it = get123().iter()
  in
    var ret = true
    ret = ret && it.has_next() && it.next() == 1
    ret = ret && it.has_next() && it.next() == 2
    ret = ret && it.has_next() && it.next() == 3
    ret = ret && not(it.has_next())
    ret
  end
end

fun doTestGetIterCount(var steps : int, it : OrderedSetIterator[int]) : bool
  while it.has_next() do
    it.step()
    steps = steps - 1
  end
  steps == 0
end

fun testGetIterCount() : bool
  doTestGetIterCount(0, getEmpty().iter()) && doTestGetIterCount(3, get123().iter())
end

fun testGetNextNode() : bool
  let
    os = get123()
  in
    let
      t1 = os.root.left.get_next_node() == os.root && os.root.get_next_node() == os.root.right && os.root.right.get_next_node() == null
    in
      os.add(4)
      t1 && os.root.right.get_next_node().elem == 4
    end
  end
end

fun testLookup() : bool
  let
    os = get123()
  in
    let
      mx = os.lookup(1)
    in
      match mx with
        case Just(x) =>
          x == 1
        end
        case Nothing =>
          false
        end

      end && let
               mx = os.lookup(2)
             in
               match mx with
                 case Just(x) =>
                   x == 2
                 end
                 case Nothing =>
                   false
                 end

               end && let
                        mx = os.lookup(3)
                      in
                        match mx with
                          case Just(x) =>
                            x == 3
                          end
                          case Nothing =>
                            false
                          end

                        end && let
                                 mx = os.lookup(4)
                               in
                                 match mx with
                                   case Just(x) =>
                                     false
                                   end
                                   case Nothing =>
                                     true
                                   end

                                 end
                               end
                      end
             end
    end && let
             os = getEmpty()
           in
             let
               mx = os.lookup(1)
             in
               match mx with
                 case Just(x) =>
                   false
                 end
                 case Nothing =>
                   true
                 end

               end
             end
           end
  end
end

fun testSetSemantics() : bool
  let
    os = get123()
  in
    os.add(1)
    os.add(4)
    os.size() == 4
  end
end

active class Main
  def main() : unit
    assertTrue(testInit())
    assertTrue(testAdd())
    assertTrue(testSize())
    assertTrue(testGetMinEmpty())
    assertTrue(testGetMin123())
    assertTrue(testGetIterInit())
    assertTrue(testGetNextNode())
    assertTrue(testHasNextEmpty())
    assertTrue(testHasNext123())
    assertTrue(testGetIterCount())
    assertTrue(testLookup())
    assertTrue(testSetSemantics())
    println("done")
  end
end
