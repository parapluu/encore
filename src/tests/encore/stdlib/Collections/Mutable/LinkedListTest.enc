
module LinkedListTest

import Test.Unit
import Collections.Mutable.LinkedList
import Data.Maybe

fun list_contains[t](list: LinkedList[t], array: [t]) : bool
  var counter = 0
  var cursor = list.first
  while cursor != Nothing do
    val current = match cursor with
                    case Just(c) => c
                  end

    if counter >= |array| then
      println("\tLIST_ARRAY: Out of bounds!")
      return false
    end

    if current.value != array(counter) then
      println("\tLIST_ARRAY: value at index {} did not match!", counter)
      return false
    end

    cursor = current.next
    counter = counter + 1
  end

  return true
end

fun create() : bool
  val list = new LinkedList[int]()
  list.first == Nothing && list.size == 0 && list.last == Nothing
end

fun prepend_one() : bool
  val list = new LinkedList[int]()
  list.prepend(22)
  match list.first with
    case Just(node) =>
      if node.value != 22 || node.next != Nothing || node.prev != Nothing then
        println("\tJust node check failed!")
        false
      else
        true
      end
    end
    case _ =>
      false
    end

  end && if list.first == list.last then
           true
         else
           println("\tlist.first != list.last")
           false
         end
end

fun prepend_two() : bool
  let
    list = new LinkedList[int]
  in
    list.prepend(22)
    list.prepend(12)
    match list.first with
      case Just(first) =>
        match first.next with
          case Just(second) =>
            first.value == 12 && second.value == 22 && match second.prev with
                                                         case Just(node) =>
                                                           node == first
                                                         end
                                                         case _ =>
                                                           false
                                                         end

                                                       end && match first.next with
                                                                case Just(node) =>
                                                                  node == second
                                                                end
                                                                case _ =>
                                                                  false
                                                                end

                                                              end
          end
          case _ =>
            false
          end

        end
      end
      case _ =>
        false
      end

    end
  end
end

fun prepend_three() : bool
  val list = new LinkedList[int]
  var success = true
  list.prepend(42)
  list.prepend(1337)
  list.prepend(420)
  success = success && match list.first with
                         case Just(first) =>
                           first.value == 420
                         end
                         case _ =>
                           false
                         end

                       end
  success = success && match list.first with
                         case Just(first) =>
                           match first.next with
                             case Just(second) =>
                               second.value == 1337
                             end
                             case _ =>
                               false
                             end

                           end
                         end
                         case _ =>
                           false
                         end

                       end
  success = success && match list.first with
                         case Just(first) =>
                           match first.next with
                             case Just(second) =>
                               match second.next with
                                 case Just(third) =>
                                   third.value == 42 && third.prev != Nothing && third.next == Nothing && match third.prev with
                                                                                                            case Just(n) =>
                                                                                                              n == second
                                                                                                            end
                                                                                                            case _ =>
                                                                                                              false
                                                                                                            end

                                                                                                          end && match second.prev with
                                                                                                                   case Just(n) =>
                                                                                                                     n == first
                                                                                                                   end
                                                                                                                   case _ =>
                                                                                                                     false
                                                                                                                   end

                                                                                                                 end && first.prev == Nothing && match list.first with
                                                                                                                                                   case Just(f) =>
                                                                                                                                                     if f == first then
                                                                                                                                                       true
                                                                                                                                                     else
                                                                                                                                                       println("\tlist.first != actual first!")
                                                                                                                                                       false
                                                                                                                                                     end
                                                                                                                                                   end

                                                                                                                                                 end && match list.last with
                                                                                                                                                          case Just(l) =>
                                                                                                                                                            if l == third then
                                                                                                                                                              true
                                                                                                                                                            else
                                                                                                                                                              println("\tlist.last != actual last!")
                                                                                                                                                              false
                                                                                                                                                            end
                                                                                                                                                          end

                                                                                                                                                        end
                                 end
                                 case _ =>
                                   false
                                 end

                               end
                             end
                             case _ =>
                               false
                             end

                           end
                         end
                         case _ =>
                           false
                         end

                       end
  success
end

fun prepend_three_and_remove_middle() : bool
  val list = new LinkedList[int]
  var middle = Nothing : Maybe[LinkedNode[int]]
  var success = true
  list.prepend(42)
  list.prepend(1337)
  list.prepend(420)

  list.remove(1)
  

  match list.first with
    case Just(first) =>
      first.value == 420 &&
      match first.next with
        case Just(second) => is_nothing(second.next) && second.value == 42
        case _ => false
      end 
    end
    case _ =>
      false
    end
  end
end

fun length_1() : bool
  let
    list = new LinkedList[int]
  in
    list.prepend(13)
    list.prepend(12)
    list.prepend(11)
    list.prepend(10)
    list.size == 4
  end
end

fun length_2() : bool
  let
    list = new LinkedList[int]
  in
    list.prepend(13)
    list.prepend(12)
    list.prepend(11)
    list.prepend(10)

    list.remove(0)
    list.remove(0)

    list.size == 2
  end
end

fun remove_all_1() : bool
  let
    list = new LinkedList[char]()
  in
    list.prepend('a')
    list.prepend('a')
    list.prepend('b')
    list.prepend('a')
    list.prepend('a')
    match list.size with
      case 5 =>
        list.remove_all('a')
        match list.size with
          case 1 =>
            true
          end
          case x =>
            println("\tsize after remove 'a' != 1! Value: {}", x)
            false
          end

        end && match list.first with
                 case Just(node) =>
                   match node.prev with
                     case Nothing =>
                       true
                     end
                     case n =>
                       println("\tfirst.prev != Nothing! Value: {}", n)
                       false
                     end

                   end && match node.next with
                            case Nothing =>
                              true
                            end
                            case n =>
                              println("\tfirst.next != Nothing! Value: {}", n)
                              false
                            end

                          end && match node.value with
                                   case 'b' =>
                                     true
                                   end
                                   case n =>
                                     println("\tfirst.value != 'b'! Value: {}", n)
                                     false
                                   end

                                 end
                 end
                 case Nothing =>
                   println("\tfirst == Nothing!")
                   false
                 end

               end
      end
      case x =>
        println("\tinitial size != 5! Value: {}", x)
        false
      end

    end
  end
end

fun append_one() : bool
  val list = new LinkedList[int]()
  list.append(22)
  match list.first with
    case Just(node) =>
      node.value == 22 && node.next == Nothing && node.prev == Nothing
    end
    case _ =>
      false
    end

  end
end

fun append_two() : bool
  val list = new LinkedList[int]()
  list.append(22)
  list.append(12)
  match list.first with
    case Just(first) =>
      match first.next with
        case Just(second) =>
          first.value == 22 && second.value == 12 && match second.prev with
                                                       case Just(node) =>
                                                         node == first
                                                       end
                                                       case _ =>
                                                         false
                                                       end

                                                     end && match first.next with
                                                              case Just(node) =>
                                                                node == second
                                                              end
                                                              case _ =>
                                                                false
                                                              end

                                                            end
        end
        case _ =>
          false
        end

      end
    end
    case _ =>
      false
    end

  end
end

fun append_three() : bool
  val list = new LinkedList[int]
  var success = true
  list.append(42)
  list.append(1337)
  list.append(420)
  success = success && match list.first with
                         case Just(first) =>
                           first.value == 42
                         end
                         case _ =>
                           false
                         end

                       end
  success = success && match list.first with
                         case Just(first) =>
                           match first.next with
                             case Just(second) =>
                               second.value == 1337
                             end
                             case _ =>
                               false
                             end

                           end
                         end
                         case _ =>
                           false
                         end

                       end
  success = success && match list.first with
                         case Just(first) =>
                           match first.next with
                             case Just(second) =>
                               match second.next with
                                 case Just(third) =>
                                   third.value == 420 && third.prev != Nothing && third.next == Nothing && match third.prev with
                                                                                                             case Just(n) =>
                                                                                                               n == second
                                                                                                             end
                                                                                                             case _ =>
                                                                                                               false
                                                                                                             end

                                                                                                           end && match second.prev with
                                                                                                                    case Just(n) =>
                                                                                                                      n == first
                                                                                                                    end
                                                                                                                    case _ =>
                                                                                                                      false
                                                                                                                    end

                                                                                                                  end && first.prev == Nothing && match list.first with
                                                                                                                                                    case Just(f) =>
                                                                                                                                                      if f == first then
                                                                                                                                                        true
                                                                                                                                                      else
                                                                                                                                                        println("\tlist.first != actual first!")
                                                                                                                                                        false
                                                                                                                                                      end
                                                                                                                                                    end

                                                                                                                                                  end && match list.last with
                                                                                                                                                           case Just(l) =>
                                                                                                                                                             if l == third then
                                                                                                                                                               true
                                                                                                                                                             else
                                                                                                                                                               println("\tlist.last != actual last!")
                                                                                                                                                               false
                                                                                                                                                             end
                                                                                                                                                           end

                                                                                                                                                         end
                                 end
                                 case _ =>
                                   false
                                 end

                               end
                             end
                             case _ =>
                               false
                             end

                           end
                         end
                         case _ =>
                           false
                         end

                       end
  success = success && list.size == 3
  success
end

fun append_all() : bool
  val list = new LinkedList[int]()
  list.append_all([1, 2, 3])
  match list.element_at(0) with
    case Just(x) =>
      if x == 1 then
        true
      else
        println("\telement at 0 != 1!")
        false
      end
    end
    case Nothing =>
      println("\telement at 0 == Nothing!")
      false
    end
  end &&
  match list.element_at(1) with
    case Just(x) =>
      if x == 2 then
        true
      else
        println("\telement at 1 != 2")
        false
      end
    end
    case Nothing =>
      println("\telement at 1 == Nothing!")
      false
    end
  end &&
  match list.element_at(2) with
    case Just(x) =>
      if x == 3 then
        true
      else
        println("\telement at 2 != 3")
        false
      end
    end
    case Nothing =>
      println("\telement at 2 == Nothing!")
      false
    end
  end &&
  match list.element_at(3) with
    case Nothing => true
    case Just(x) =>
      println("\telement at 3 != Nothing!")
      false
    end
  end &&
  if list.first == list.last then
    println("\tlist.first == list.last")
    false
  else
    true
  end &&
  if list.size != 3 then
    println("\tlist.size != 3")
    false
  else
    true
  end
end

fun list_element_at_one() : bool
  val list = new LinkedList[int]()
  list.append(1)
  list.append(2)
  list.append(3)
  list.append(4)
  match list.element_at(2) with
    case Just(x) =>
      match x with
        case 3 => true
        case x =>
          println("\tgot {}, should have gotten 3!", x)
          false
        end
      end
    end
    case Nothing =>
      println("\tgot Nothing!")
      false
    end
  end
end

fun list_element_at_two() : bool
  val list = new LinkedList[int]()
  list.append_all([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
  match list.element_at(0) with
    case Just(0) =>
      true
    end
    case _ =>
      false &&
      match list.element_at(3) with
        case Just(3) => true
        case _ =>
          false &&
          match list.element_at(10) with
            case Nothing => true
            case _ => false
          end
        end
      end
    end
  end
end

fun contains_one() : bool
  val list = new LinkedList[int]()
  list.append_all([1, 2, 3, 4, 5, 6, 7, 8])
  list.contains(3)
end

fun contains_two() : bool
  val list = new LinkedList[int]()
  list.append_all([1, 2, 3, 4, 5, 6, 7, 8])
  list.contains(3) && list.contains(7)
end

fun contains_three() : bool
  val list = new LinkedList[int]()
  list.append_all([1, 2, 3, 4, 5, 6, 7, 8])
  not(list.contains(10))
end

fun prepend_all_one() : bool
  val list = new LinkedList[int]()
  list.prepend_all([0,1,2])

  match list.first with
    case Just(f) =>
      match f.next with
        case Just(s) =>
          match s.next with
            case Just(l) =>
              if f.value == 2 && s.value == 1 && l.value == 0 then
                true
              else
                println("\tvalues are not correct!")
                false
              end
            end
            case Nothing =>
              println("\tlast item == Nothing!")
              false
            end
          end
        end
        case Nothing =>
          println("\tsecond item == Nothing!")
          false
        end
      end
    end
    case Nothing =>
      println("\tfirst item == Nothing!")
      false
    end
  end
end

fun list_insert_one() : bool
  val list = new LinkedList[int]()

  -- Populate list with some values.
  list.append_all([0,1,2,3,4,5])

  -- Insert value in middle of list.
  list.insert(42, 3)

  -- List should now look something like: [0,1,2,42,3,4,5]
  match list.element_at(0) with
    case Just(n) when n == 0 => true
    case _ =>
      println("\telement #0 != 0!")
      false
    end
  end &&
  match list.element_at(1) with
    case Just(n) when n == 1 => true
    case _ =>
      println("\telement #1 != 1!")
      false
    end
  end &&
  match list.element_at(2) with
    case Just(n) when n == 2 => true
    case _ =>
      println("\telement #2 != 2!")
      false
    end
  end &&
  match list.element_at(3) with
    case Just(n) when n == 42 => true
    case n =>
      println("\telement #3 != 42! Value: {}", n)
      false
    end
  end &&
  match list.element_at(4) with
    case Just(n) when n == 3 => true
    case _ =>
      println("\telement #4 != 3!")
      false
    end
  end &&
  match list.element_at(5) with
    case Just(n) when n == 4 => true
    case _ =>
      println("\telement #5 != 4!")
      false
    end
  end &&
  match list.element_at(6) with
    case Just(n) when n == 5 => true
    case _ =>
      println("\telement #6 != 5!")
      false
    end
  end &&
  match list.element_at(7) with
    case Nothing => true
    case _ =>
      println("\telement #7 != Nothing!")
      false
    end
  end
end


fun list_insert_two() : bool
  val list = new LinkedList[int]()

  -- Insert into an empty list at some random location.
  list.insert(12, 10)

  -- List should still contain the value
  match list.element_at(0) with
    case Just(n) when n == 12 => true
    case n =>
      println("\tfirst element != 12! Value: {}", n)
      false
    end
  end &&
  match list.element_at(1) with -- Ensure that it didn't somehow insert more values.
    case Nothing => true
    case n =>
      println("\telement #1 != Nothing! Value: {}", n)
      false
    end
  end
end

fun list_clone_one() : bool
  val list = new LinkedList[int]()

  list.append_all([0,1,2,3,4,5])

  val new_list = list.clone()

  -- Both lists should be the same
  if new_list.size() != list.size() then
    println("\tLists are not of the same size!")
    return false
  end

  repeat i <- list.size() do
    if list.nth(i) != new_list.nth(i) then
      println("\telement #{} are not the same for both lists!", i)
      return false
    end
  end

  -- Insert a new value into old list
  list.append(12)

  -- They should no longer be the same
  if new_list.size() == list.size() then
    println("\tnew_list has same size as previous!")
    return false
  end

  match new_list.element_at(list.size()-1) with
    case Just(n) =>
      println("\tnew_list contains value where it shouldn't!")
      return false
    end
    case Nothing => return true
  end

  -- This line should never be reached!
  return false
end


fun list_remove_front_one() : bool
  val list = new LinkedList[int]()
  list.append_all([0,1,2,3])

  val front = list.remove_front()

  match front with
    case Just(f) =>
      if f != 0 then
        println("\tf.value != 0!")
        false
      else
        true
      end
    end
    case Nothing =>
      println("\tdidn't return front item!")
      false
    end
  end &&
  if not list_contains[int](list, [1,2,3]) then
    println("\tlist doesn't have the correct structure!")
    false
  else
    true
  end
end

fun list_remove_back_one() : bool
  val list = new LinkedList[int]()
  list.append_all([0,1,2,3])

  val back = list.remove_back()

  match back with
    case Just(b) =>
      if b != 3 then
        println("\tf.value != 3!")
        false
      else
        true
      end
    end
    case Nothing =>
      println("\tdidn't return back item!")
      false
    end
  end &&
  if not list_contains[int](list, [0,1,2]) then
    println("\tlist doesn't have the correct structure!")
    false
  else
    true
  end
end

fun list_iter_one() : bool
  val list = new LinkedList[int]()
  list.append_all([0,1,2,3,4,5])
  var count = 0
  val iter = list.iterator()
  while iter.has_next() do
    count += 1
    iter.next()
  end
  return count == 6
end

active class Main
  def main() : unit
    val tests = new TestSuite("LinkedList", 100)
    tests.assert_true("init", create)
    tests.assert_true("prepend one int", prepend_one)
    tests.assert_true("prepend two ints", prepend_two)
    tests.assert_true("prepend three ints", prepend_three)
    tests.assert_true("prepend three ints and remove middle", prepend_three_and_remove_middle)
    tests.assert_true("length #1", length_1)
    tests.assert_true("length #2", length_2)
    tests.assert_true("remove_all #1", remove_all_1)
    tests.assert_true("append one int", append_one)
    tests.assert_true("append two ints", append_two)
    tests.assert_true("append three ints", append_three)
    tests.assert_true("append all", append_all)
    tests.assert_true("element_at #1", list_element_at_one)
    tests.assert_true("element_at #2", list_element_at_two)
    tests.assert_true("contains #1", contains_one)
    tests.assert_true("contains #2", contains_two)
    tests.assert_true("contains #3", contains_three)
    tests.assert_true("prepend_all #1", prepend_all_one)
    tests.assert_true("insert #1", list_insert_one)
    tests.assert_true("insert #2", list_insert_two)
    tests.assert_true("clone #1", list_clone_one)
    tests.assert_true("remove front #1", list_remove_front_one)
    tests.assert_true("remove back #1", list_remove_back_one)
    tests.assert_true("iter #1", list_iter_one)
    tests.run()
  end
end


