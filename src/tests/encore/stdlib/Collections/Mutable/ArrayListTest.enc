module ArrayListTest

import Unit.Unit
import Collections.Mutable.ArrayList
import Data.Either

fun compare_optional(a: Maybe[int], b: Maybe[int]) : bool
  match a with
    case Just(av) =>
      match b with
        case Just(bv) => return av == bv
        case Nothing => return false
      end
    end
    case Nothing => return b == Nothing
  end
end

fun compare_structure(list: ArrayList[int], structure: [Maybe[int]]) : bool
  if list.size() != |structure| && |list.int_arr| != |structure| then
    println("\tcheck_internal_structure: Sizes do not match!")
    println("\tcheck_internal_structure: arrlist.size = {}, |list.int_arr| = {}, struc = {}", list.size(), |list.int_arr|, |structure|)
    return false
  end

  repeat i <- |structure| do
    if not compare_optional(list.int_arr(i), structure(i)) then
      println("\tcheck_internal_structure: int_arr({}) != structure({})!", i, i)
      println("\tcheck_internal_structure: int_arr({}) == {}", i, list.int_arr(i))
      println("\tcheck_internal_structure: structure({}) == {}", i, structure(i))
      return false
    end
  end

  return true
end

fun prepend_one() : bool
  val arrlist = new ArrayList[int]()

  arrlist.prepend(12)

  assert("first element should be 12", arrlist.int_arr(0) == Just(12)) &&
  assert("size == 1", arrlist.size() == 1)
end

fun prepend_two() : bool
  val arrlist = new ArrayList[int]()

  arrlist.prepend(12)
  arrlist.prepend(24)

  assert("first element should be 24", arrlist.int_arr(0) == Just(24)) &&
  assert("second element should be 12", arrlist.int_arr(1) == Just(12)) &&
  assert("size == 2", arrlist.size() == 2)
end

fun prepend_all_one() : bool
  val arrlist = new ArrayList[int]()

  arrlist.prepend_all([1,2,3,4])

  assert("list contains all values", compare_structure(arrlist, [Just(4), Just(3), Just(2), Just(1)]))
end

fun append_one() : bool
  val arrlist = new ArrayList[int]()

  arrlist.append(2)

  assert("should contains 2", arrlist.int_arr(0) == Just(2)) &&
  assert("second element should be Nothing", arrlist.int_arr(1) == Nothing) &&
  assert("size == 1", arrlist.size() == 1)
end

fun append_two() : bool
  val arrlist = new ArrayList[int]()

  arrlist.append(2)
  arrlist.append(3)

  assert("first element should be 2", arrlist.int_arr(0) == Just(2)) &&
  assert("second element should be 3", arrlist.int_arr(1) == Just(3)) &&
  assert("third element should be Nothing", arrlist.int_arr(2) == Nothing) &&
  assert("size == 2", arrlist.size() == 2)
end

fun append_all_one() : bool
  val arrlist = new ArrayList[int]()

  arrlist.append_all([1,2,3,4])

  assert("list contains all values", compare_structure(arrlist, [Just(1),Just(2),Just(3),Just(4)]))
end

fun insert_one() : bool
  val arrlist = new ArrayList[int]()

  val output = arrlist.insert(1, 0)

  match output with
    case Right[String,unit]() => true
    case Left[String,unit](s) =>
      println("\treceived Left when expecting Right: {}", s)
      return false
    end
  end

  -- If this is reached, above match succeeded.
  assert("has correct structure", compare_structure(arrlist, [Just(1)]))
end

fun insert_two() : bool
  val arrlist = new ArrayList[int]()

  arrlist.insert(1,0)
  arrlist.insert(2,1)
  arrlist.insert(4,2)
  arrlist.insert(8,3)

  assert("correct structure", compare_structure(arrlist, [Just(1), Just(2), Just(4), Just(8)]))
end

fun insert_three() : bool
  val arrlist = new ArrayList[int]()

  -- Store some data in the list
  arrlist.append(1)
  arrlist.append(3)

  if not assert("base case", compare_structure(arrlist, [Just(1), Just(3)])) then
    println("\tbase case failed!")
    return false
  end

  -- Insert the value 2 in the middle of the stored values
  arrlist.insert(2, 1)

  assert("new value in middle", compare_structure(arrlist, [Just(1), Just(2), Just(3)]))
end

fun insert_four_failure() : bool
  val arrlist = new ArrayList[int]()

  -- This should return a Left("OutOfBounds")
  val output = arrlist.insert(12, 10)

  match output with

    case Left[String,uint](s) =>
      if not s.equals("OutOfBounds") then
        println("\tReceived incorrect error message! Received: {}", s)
        false
      else
        true
      end
    end

    case Right[String,uint]() =>
      println("\tRecieved Right when expecting Left!")
      false
    end

    case _ =>
      println("\tnon matching match-case!")
      false
    end
  end
end

fun contains_one() : bool
  val arrlist = new ArrayList[int]()

  arrlist.append(1)

  assert("contains 1", arrlist.contains(1))
end

fun contains_two() : bool
  val arrlist = new ArrayList[int]()

  arrlist.append(1)
  arrlist.append(2)
  arrlist.append(4)
  arrlist.append(8)

  assert("contains 4", arrlist.contains(4)) &&
  assert("contains 2", arrlist.contains(2)) &&
  assert("doesn't contain 12", not arrlist.contains(12))
end

fun element_at_one() : bool
  val arrlist = new ArrayList[int]()

  arrlist.append(1)

  match arrlist.element_at(0) with
    case Just(x) =>
      if x != 1 then
        println("\tgot incorrect value!")
        false
      else
        true
      end
    end
    case Nothing =>
      println("\tExpected Just(1), got Nothing!")
      false
    end
  end
end

fun element_at_two() : bool
  val arrlist = new ArrayList[int]()

  arrlist.append_all([1,2,3,4,5,6,7,8,9])

  match arrlist.element_at(3) with
    case Just(x) =>
      if x != 4 then
        println("\tGot {} when expecting 4!", x)
        false
      else
        true
      end
    end
    case Nothing =>
      println("\tExpected Just(4), got Nothing!")
      false
    end
  end
end

fun nth_one() : bool
  val arrlist = new ArrayList[int]()

  arrlist.append(2)

  assert("should get value 2", arrlist.nth(0) == 2)
end

fun nth_two() : bool
  val arrlist = new ArrayList[int]()

  arrlist.append_all([1,2,3,4,5])

  assert("should get value 4", arrlist.nth(3) == 4)
end

fun remove_one() : bool
  val arrlist = new ArrayList[int]()

  arrlist.append_all([1,2,3,4,5])

  if not assert("base case", compare_structure(arrlist, [Just(1), Just(2), Just(3), Just(4), Just(5)])) then
    println("\tbase case does not hold!")
    return false
  end

  -- Remove value 4
  arrlist.remove(3)

  assert("post remove",
         compare_structure(arrlist,
                           [Just(1), Just(2), Just(3), Just(5)]))
end

fun remove_two() : bool
  val arrlist = new ArrayList[int]()

  arrlist.append_all([1,2,3,4])

  -- Remove values 3 & 4
  val three = arrlist.remove(2)
  val four =  arrlist.remove(2)

  assert("post remove",
         compare_structure(arrlist,
                           [Just(1), Just(2)])) &&
  match three with
    case Just(3) => true
    case _ =>
      println("\tthree contained incorrect value!")
      false
    end
  end &&
  match four with
    case Just(4) => true
    case _ =>
      println("\tfour contained incorrect value!")
      false
    end
  end
end

fun remove_three() : bool
  val arrlist = new ArrayList[int]()

  arrlist.append_all([1,2,3,4])

  -- This should fail
  val failure = arrlist.remove(12)

  match failure with
    case Nothing => true
    case _ =>
      println("\tremove didn't fail!")
      false
    end
  end
end

fun remove_front_one() : bool
  val arrlist = new ArrayList[int]()

  arrlist.append_all([1,2,3])

  val out = arrlist.remove_front()

  assert("1 is removed",
         compare_structure(arrlist,
                           [Just(2), Just(3)])) &&
  match out with
    case Just(1) => true
    case _ =>
      println("\tremove_front didn't return the correct value!")
      false
    end
  end
end

fun remove_back_one() : bool
  val arrlist = new ArrayList[int]()

  arrlist.append_all([1,2,3])

  val out = arrlist.remove_back()

  assert("3 is removed",
         compare_structure(arrlist,
                           [Just(1), Just(2)])) &&
  match out with
    case Just(3) => true
    case _ =>
      println("\tremove_back didn't return the correct value!")
      false
    end
  end
end

fun ensure_can_accomodate_one() : bool
  -- Initial list has room for 16 elements.
  val arrlist = new ArrayList[int]()

  if not assert("base case: 16 elements", |arrlist.int_arr| == 16) then
    return false
  end

  -- Ensure that the list can withhold atleast 10 elements.
  -- Since this is smaller than the initial size and we have not
  -- added any data to it, this should not resize the internal array.
  arrlist.ensure_can_accomodate(10)

  assert("size should not have changed", |arrlist.int_arr| == 16)
end

fun ensure_can_accomodate_two() : bool
  val arrlist = new ArrayList[int]()

  if not assert("base case: 16 elements", |arrlist.int_arr| == 16) then
    return false
  end

  -- Ensure there is room for atleast 30 additional elements.
  arrlist.ensure_can_accomodate(30)

  -- The call above should have resized the array to accomodate for
  -- atleast 14 additional elements since the list is currently empty.
  assert("new size >= 30", |arrlist.int_arr| >= 30)
end

fun shift_right_one() : bool
  val arrlist = new ArrayList[int]()

  -- Put some values in the list.
  arrlist.append(1)
  arrlist.append(2)
  arrlist.append(4)
  arrlist.append(8)
  arrlist.append(16)
  arrlist.append(32)

  -- The arraylist should have the following structure:
  --  0|1|2|3| 4| 5
  -- [1,2,4,8,16,32]
  if not compare_structure(arrlist, [Just(1),Just(2),Just(4),Just(8),Just(16),Just(32)]) then
    println("\tpre-shift check failed!")
    return false
  end

  arrlist.shift_right(4, 2)

  -- The arraylist should now have the new structure:
  --  0|1|2|3|4|5| 6| 7
  -- [1,2,4,8,-,-,16,32]
  if not compare_structure(arrlist, [Just(1),Just(2),Just(4),Just(8),Nothing,Nothing,Just(16),Just(32)]) then
    println("\tpost-shift check failed!")
    return false
  end

  return true
end

fun shift_left_one() : bool
  val arrlist = new ArrayList[int]()

  arrlist.append_all([1,2,3,4,5,6,7])

  if not assert("pre shift", compare_structure(arrlist, [Just(1), Just(2), Just(3), Just(4), Just(5), Just(6), Just(7)])) then
    println("\tpre-shift assert failed!")
    return false
  end

  -- This should restructure the arrlist into [1,4,5,6,7]
  arrlist.shift_left(2, 2)

  assert("post shift",
         compare_structure(arrlist,
                           [Just(1), Just(4), Just(5), Just(6), Just(7)]))
end

fun shift_left_two() : bool
  val arrlist = new ArrayList[int]()

  arrlist.append_all([1,2,3,4,5,6,7])

  -- New structure should be [4,5,6,7]
  arrlist.shift_left(2, 3)

  assert("post shift",
         compare_structure(arrlist,
                           [Just(4), Just(5), Just(6), Just(7)]))
end

fun shift_left_three() : bool
  val arrlist = new ArrayList[int]()

  arrlist.append_all([1,2,3,4,5,6,7])

  -- This should not alter the array since it is out of bounds.
  arrlist.shift_left(2, 4)

  assert("post shift",
         compare_structure(arrlist,
                           [Just(1), Just(2), Just(3), Just(4), Just(5), Just(6), Just(7)]))
end


class Main
  def main() : unit
    val tests = new TestSuite("ArrayList", 100)
    tests.assert_true("prepend #1", prepend_one)
    tests.assert_true("prepend #2", prepend_two)
    tests.assert_true("prepend_all #1", prepend_all_one)
    tests.assert_true("append #1", append_one)
    tests.assert_true("append #2", append_two)
    tests.assert_true("insert #1", insert_one)
    tests.assert_true("insert #2", insert_two)
    tests.assert_true("insert #3", insert_three)
    tests.assert_true("insert #4 failure", insert_four_failure)
    tests.assert_true("contains #1", contains_one)
    tests.assert_true("contains #2", contains_two)
    tests.assert_true("element_at #1", element_at_one)
    tests.assert_true("element_at #2", element_at_two)
    tests.assert_true("nth #1", nth_one)
    tests.assert_true("nth #2", nth_two)
    tests.assert_true("remove #1", remove_one)
    tests.assert_true("remove #2", remove_two)
    tests.assert_true("remove #3", remove_three)
    tests.assert_true("remove_front #1", remove_front_one)
    tests.assert_true("remove_back #1", remove_back_one)
    tests.assert_true("shift right #1", shift_right_one)
    tests.assert_true("shift left #1", shift_left_one)
    tests.assert_true("shift left #2", shift_left_two)
    tests.assert_true("shift left #3", shift_left_three)
    tests.assert_true("ensure can accomodate #1", ensure_can_accomodate_one)
    tests.assert_true("ensure can accomodate #2", ensure_can_accomodate_two)

    tests.run()
  end
end

