import ParT.ParT

fun sum(acc : int, y : int) : int
  acc + y
end

fun millionItems(size : int) : Par[int]
  var p = liftv(0)
  repeat i <- size do
    p = p ||| liftv(i)
  end
  p
end

fun millionFutures(size : int) : Par[int]
  val actors = initActors(size)
  execute(actors)
where
  fun initActors(size : int) : [Accountant]
    val ar = new [Accountant](size)
    repeat i <- size do
      ar(i) = new Accountant(i)
    end
    ar
  end

  fun execute(actors : [Accountant]) : Par[int]
    var p = liftv(0)
    for a <- actors do
      p = p ||| liftf(a ! getNumber())
    end
    p
  end
end

active class Accountant
  var number : int
  def init(number : int) : unit
    this.number = number
  end

  def getNumber() : int
    this.number
  end
end

active class Main
  def main() : unit
    let
      f = reduce(sum, 0, millionItems(1000000))
      f2 = reduce(sum, 0, millionFutures(1000000))
      v = get(f)
      v2 = get(f2)
    in
      print("Result million values: {}\n", v)
      print("Result million futures: {}\n", v2)
    end
  end
end
