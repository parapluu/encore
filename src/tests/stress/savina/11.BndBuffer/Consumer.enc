module Consumer

import Manager
import Random

fun math_log(x:real) : real
  EMBED (real) log(#{x}); END
end

fun math_abs(a:int) : int
  if a < 0 then
    0-a
  else
    a
  end
end

fun processItem(curTerm:real, cost:int) : real
  val max = 4000000000
  var res = curTerm
  if cost > 0 then
    repeat i <- cost do
      repeat j <- 100 do
        res = res + math_log(math_abs(random(max)) + 0.01)
      end
    end
  else
    res = res + math_log(math_abs(random(max)) + 0.01)
  end
  -- print ("Consumer is processing items")
  res
end

active class Consumer
  val id : int
  val manager : Manager
  val consCost : int
  var consItem : real

  def init(id:int, manager:Manager, consCost:int) : unit
    this.id = id
    this.manager = manager
    this.consCost = consCost
    -- print("Consumer {} created\n", id)
  end

  def doConsume(payload: real) : unit
    this.consItem = processItem(this.consItem + payload, this.consCost)
  end

  def process(payload: real) : unit
    this.doConsume(payload)
    this.manager ! consumerAvailable(this)
  end
end
