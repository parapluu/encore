module ArrayList

import Std

-- this is not a proper ArrayList implementation
-- but it is enough for this case study
linear class ArrayList[t] : Id
  var dat : [t]
  var size : int
  def init(n : int) : unit
    this.dat  = new [t](n)
    this.size = 0
  end
  def size() : int
    this.size
  end
  def at(index : int) : t
    this.dat(index)
  end

  -- could be better
  def addAll(other : borrowed ArrayList[t]) : unit
    var i = 0
    while i < other.size() do
      this.add(other.at(i))
      i = i + 1
    end
  end

  def resize() : unit
    let
      tmp = new [t](|this.dat| * 10)
    in
      var i = 0
      while i < this.size do
        tmp(i) = this.dat(i)
        i = i + 1
      end
      this.dat = tmp
    end
  end
  def add(value : t) : unit
    if |this.dat| == this.size then
      this.resize()
    end
    this.dat(this.size) = value
    this.size = this.size + 1
  end
  def getData() : [t]
    this.dat
  end
end
