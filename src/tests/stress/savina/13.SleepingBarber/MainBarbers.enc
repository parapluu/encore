import Barber

-- Sleeping barber
-- corresponds to https://github.com/shamsmahmood/savina/blob/master/src/main/java/edu/rice/habanero/benchmarks/barber/SleepingBarberConfig.java
-- written by SD on 19.01.2017

active class Main

  def argToInt(str: String): int
    match str.to_int() with
       case Just(result) => result
       case Nothing     =>   0
    end
  end

  def argToBool(str: String): bool
  --  match str.to_bool() with
  --    Just result => result
  --    Nothing     => { false };
      match str.to_int() with
         case Just(result) => if ( result == 0 ) then false else true end
         case Nothing     =>   false
      end
  end

  def boolToString(b: bool) : String
        match b with
           case true => "true"
           case false => "false"
        end
  end

  def get_ith_argument(args: [String],nrArgs:int,i:int,default:int): int
    if  (nrArgs<i) then
      default
    else
      this.argToInt(args(i))
    end
  end

  def main(args: [String]) : unit
--    println ("start init");
    val nrArgs = |args|-1
    -- args consists of the name of the program called, and the remaining actual parameters
    -- println ( ("nrArgs: ").concatenate(string_from_int(nrArgs) ))
    val N =  -- num haircuts
          this.get_ith_argument(args,nrArgs,1,5000)
    val W =  -- waiting room size
         this.get_ith_argument(args,nrArgs,2,1000)
    val APR =  --  average production rate
          this.get_ith_argument(args,nrArgs,3,1000)
    val AHR =  --  average haircut rate
          this.get_ith_argument(args,nrArgs,4,1000)
    val debug =  --  average haircut rate
          if  (nrArgs< 6) then
            false
          else
            this.argToBool(args(5))
          end

    -- print the arguments as read or from default values
    println ( ("N: ").concatenate(string_from_int(N) ))
    println ( ("W: ").concatenate(string_from_int(W) ))
    println ( ("APR: ").concatenate(string_from_int(APR) ))
    println ( ("AHR: ").concatenate(string_from_int(AHR) ))
    println ( ("bebug: ").concatenate(this.boolToString(debug) ))

    -- from now on corresponds to runIteration
    val barber = new Barber(AHR)
    val room   = new WaitingRoom(W,barber)
    val generator   = new CustomerGenerator(N,APR,room)
  end
end
