active class Master
  val solutionsLimit : int
  val workers : [Worker]
  val priorities : int
  val solutions : [int]
  var messageCounter: int = 0
  var numWorkersTerminated: int = 0
  var numWorkSent: int = 0
  var numWorkCompleted: int = 0
  var resultCounter: int = 0

  def init(numWorkers: int, priorities: int, solutionsLimit: int, threshold: int, size:int) : unit
    -- println("Creating Master")
    this.priorities = priorities
    this.solutionsLimit = solutionsLimit
    println("Boardsize = {}, number of solutions should be {}", size, solutionsLimit)
    this.workers = new [Worker](numWorkers)
    repeat i <- |this.workers|  do
      this.workers(i) = new Worker(this,threshold,size)
    end
    -- println("All workers created!")
    this.sendWork(new [int](0), 0, this.priorities) -- triggers computation
  end

  def success() : unit
    this.resultCounter = this.resultCounter+1
    -- println("***** Number of solution: {} *****", this.resultCounter)
    if (this.resultCounter == this.solutionsLimit) then
      -- this.requestWorkersToTerminate()
      println("Found {} solutions", this.resultCounter)
      println("Program succesfully completed!")
    end
  end

  def sendWork(payload: [int], depth: int, priorities: int) : unit
    -- println("Master sends work to worker")
    val f = this.workers(this.messageCounter)!nqueensKernelPar(payload,depth,priorities)
    this.messageCounter = (this.messageCounter + 1) % |this.workers|
    -- println("Master: sending work to worker {}", this.messageCounter)
    await(f)
    this.numWorkCompleted = this.numWorkCompleted + 1
    -- f ~~> fun (u: unit)=>this.numWorkCompleted = this.numWorkCompleted + 1
    -- println("Forward chaining has succeeded, numWorkCompleted is {}", this.numWorkCompleted)
  end
end

active class Worker
  val threshold: int
  val size: int
  val master : Master

  def init(master: Master,threshold: int, size:int) : unit
    -- println("Creating Worker")
    this.master = master
    this.threshold = threshold
    this.size = size
  end

  def arraycopy(array1: [int], pos1: int, array2: [int], pos2: int, depth: int) : unit
    repeat i <- depth do
      array2(i+pos2)=array1(i+pos1)
    end
  end

  def boardValid(n: int, board : [int]) : bool
    var p = 0
    var q = 0
    var result = true
    repeat i <- n do
      p = board(i)
      for j <- [i+1..n-1] do
        q = board(j)
        -- print("i variable has value {}, j variable has value {}\n", i, j)
        if q==p || q == p - (j - i) || q == p + (j - i) then
          return false
        end
      end
    end
    -- println("Board is valid: {}",result)
    true
  end

  def nqueensKernelPar(payload : [int], depth : int, priority : int) : unit
    -- println("Worker running nqueensKernelPar")
    -- println("size has value {}, depth has value {}", this.size, depth)
    if this.size != depth then
      if depth >= this.threshold then
    	  -- println("Worker reaches cut-off for nqueensKernelSeq")
	      this.nqueensKernelSeq(payload, depth)
      else
      	-- println("Worker continues with nqueensKernelPar")
      	-- var newPriority = priority - 1
        -- var newDepth = depth+1
      	repeat i <- this.size do
          var b = new [int](depth+1)
          this.arraycopy(payload,0,b,0,depth)
          b(depth) = i
          -- println("Checking position at depth {}", depth+1)
          if this.boardValid(depth+1, b) then
            -- println("Worker sends more work to master")
            this.master!sendWork(b,depth+1,priority-1) -- send new job to Master
          end
        end
      end
    else
      -- println("Worker reports PAR success!")
      this.master!success()
    end
  end -- nqueensKernelPar

  def nqueensKernelSeq(payload: [int], depth: int) : unit
    -- println("size has value {}, depth has value {}", this.size, depth)
    if this.size != depth then
      -- println("SEQ: size != depth")
      var b = new [int](depth+1)
      repeat i <- this.size do
        this.arraycopy(payload, 0, b, 0, depth)
        b(depth) = i
	      -- println("Checking position at depth {}", depth)
        if this.boardValid(depth+1, b) then
	        -- println("New job with depth {}", depth+1)
      	  this.nqueensKernelSeq(b, depth+1)
      	end
      end
    else
      -- println("Worker reports SEQ success!")
      this.master!success()
    end
  end -- nqueensKernelSeq


end

active class Main
  def main() : unit
    val numWorkers = 20 -- NQueensConfig.NUM_WORKERS
    val priorities = 10 -- NQueensConfig.PRIORITIES
    val size = 12 -- for the Workers
    val threshold = 4 -- for the Workers
    val solutions = [ 1, 0, 0, 2, 10 {-- 5 --}, 4, 40, 92, 352, 724 {-- 10 --}, 2680, 14200, 73712, 365596, 2279184 {-- 15 --}, 14772512, 95815104, 666090624, 4968057848, 39029188884 {-- 20 --} ]
    val solutionsLimit = solutions(size-1)
    var master = new Master(numWorkers, priorities, solutionsLimit, threshold, size)
  end
end
